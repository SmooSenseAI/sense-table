{"version":3,"file":"static/chunks/813.f81c0a990994666a.js","mappings":"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","sources":["webpack://_N_E/./src/components/bubblePlot/PlotlyBubblePlot.js","webpack://_N_E/./src/components/elements/plotly/plotlyLayout.js"],"sourcesContent":["import React, { useMemo, useCallback, useRef, useEffect, useState } from 'react';\nimport dynamic from 'next/dynamic';\nimport useMUITheme from '@/hooks/useMUITheme';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport { fetchRandomRowData } from '@/store/rowDataSlice';\nimport { setSampleCondition } from '@/store/viewingSlice';\nimport { useCommonPlotlyLayout } from '@/components/elements/plotly/plotlyLayout';\n\n// Dynamically import our PlotlyWrapper to avoid SSR issues\nconst Plot = dynamic(() => import('@/components/elements/plotly/PlotlyWrapper'), { ssr: false });\n\nconst PlotlyBubblePlot = React.memo(function PlotlyBubblePlot({data}) {\n    const dispatch = useDispatch();\n    const muiTheme = useMUITheme();\n    const [isClient, setIsClient] = useState(false);\n    const [plotlyError, setPlotlyError] = useState(null);\n\n    const xColumn = useSelector((state) => state.settings.bubblePlotXColumn);\n    const yColumn = useSelector((state) => state.settings.bubblePlotYColumn);\n    const maxMarkerSize = useSelector((state) => state.settings.bubblePlotMaxMarkerSize);\n    const opacity = useSelector((state) => state.settings.bubblePlotOpacity);\n\n    const commonPlotlyLayout = useCommonPlotlyLayout({xTitle: `X: ${xColumn}`, yTitle: `Y: ${yColumn}`});\n\n    // Ensure we're on the client side\n    useEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    const plotData = useMemo(() => {\n        if (!data || !Array.isArray(data)) {\n            return [];\n        }\n\n        try {\n            const plotlyData = data.map((item, index) => ({\n                x: item.x,\n                y: item.y,\n                name: item.name,\n                mode: 'markers',\n                type: 'scatter',\n                marker: {\n                    size: item.customdata.map(c => Math.min(Math.sqrt(c.count), maxMarkerSize)),\n                    opacity: opacity,\n                    line: {\n                        color: muiTheme.palette.text.primary,\n                        width: 1\n                    }\n                },\n                customdata: item.customdata,\n                hovertemplate:\n                    `<b>X ${xColumn}:</b> %{x}<br>` +\n                    `<b>Y ${yColumn}:</b> %{y}<br>` +\n                    `<b>Count:</b> %{customdata.count}<br>` +\n                    '<extra></extra>',\n            }));\n            return plotlyData;\n        } catch (error) {\n            console.error('Error preparing plot data:', error);\n            setPlotlyError(error.message);\n            return [];\n        }\n    }, [data, muiTheme, xColumn, yColumn, opacity, maxMarkerSize]);\n\n    const layout = useMemo(() => ({\n        ...commonPlotlyLayout,\n        selectdirection: 'any'\n    }), [commonPlotlyLayout]);\n\n    const config = useMemo(() => ({\n        responsive: true,\n        displayModeBar: true,\n        scrollZoom: true,\n        modeBarButtonsToRemove: ['autoScale2d', 'resetScale2d', 'zoomIn2d', 'zoomOut2d', 'toImage', 'select2d', 'zoom2d'],\n        displaylogo: false,\n    }), []);\n\n    const handleClick = useCallback((plotlyData) => {\n        try {\n            if (plotlyData.points && plotlyData.points.length > 0 ) {\n                const point = plotlyData.points[0];\n                const condExpr = point.customdata.condExpr;\n                dispatch(setSampleCondition(condExpr));\n                dispatch(fetchRandomRowData({source: `Samples from bubble plot`}));\n            }\n        } catch (error) {\n            console.error('Error handling click:', error);\n        }\n    }, [dispatch]);\n\n    const handleSelected = useCallback((eventData) => {\n        try {\n            if (eventData && eventData.points && eventData.points.length > 0 ) {\n                const condExpr = _(eventData.points).map(p => `(${p.customdata.condExpr})`).join(' OR ');\n                if (condExpr) {\n                    dispatch(setSampleCondition(condExpr));\n                    dispatch(fetchRandomRowData({source: `Samples from bubble plot`}));\n                }\n\n            }\n        } catch (error) {\n            console.error('Error handling selection:', error);\n        }\n    }, [dispatch]);\n\n    // Don't render on server side\n    if (!isClient) {\n        return (\n            <div style={{\n                width: '100%',\n                height: '400px',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                backgroundColor: muiTheme.palette.background.paper,\n                color: muiTheme.palette.text.secondary\n            }}>\n                Loading chart...\n            </div>\n        );\n    }\n\n    // Show error state if there's an error\n    if (plotlyError) {\n        return (\n            <div style={{\n                width: '100%',\n                height: '400px',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                backgroundColor: muiTheme.palette.background.paper,\n                color: muiTheme.palette.error.main,\n                flexDirection: 'column',\n                gap: '10px'\n            }}>\n                <div>Error loading chart</div>\n                <div style={{ fontSize: '12px', opacity: 0.7 }}>{plotlyError}</div>\n            </div>\n        );\n    }\n\n    return (\n        <div style={{\n            width: '100%',\n            height: '100%',\n            minHeight: '400px'\n        }}>\n            <Plot\n                data={plotData}\n                layout={layout}\n                config={config}\n                style={{ width: '100%', height: '100%' }}\n                useResizeHandler={true}\n                onClick={handleClick}\n                onSelected={handleSelected}\n                onError={(error) => {\n                    console.error('Plotly error:', error);\n                    setPlotlyError(error.message || 'Unknown plotting error');\n                }}\n            />\n        </div>\n    );\n});\n\nexport default PlotlyBubblePlot;","import useMUITheme from \"@/hooks/useMUITheme\";\n\nexport const useCommonPlotlyLayout = ({xTitle='', yTitle=''}) => {\n\n    const muiTheme = useMUITheme();\n\n    return {\n        title: {\n            text: '',\n            font: {\n                color: muiTheme.palette.text.primary\n            }\n        },\n        xaxis: {\n            title: {\n                text: xTitle,\n                font: {\n                    color: muiTheme.palette.text.primary,\n                    size: muiTheme.typography.fontSize + 2\n                }\n            },\n            showticklabels: false, // Hide tick labels as in original\n            showline: false,\n            showgrid: false,\n            tickfont: {\n                color: muiTheme.palette.text.secondary\n            }\n        },\n        yaxis: {\n            title: {\n                text: yTitle,\n                font: {\n                    color: muiTheme.palette.text.primary\n                }\n            },\n            showticklabels: true,\n            showline: false,\n            showgrid: false,\n            tickfont: {\n                color: muiTheme.palette.text.secondary\n            }\n        },\n        paper_bgcolor: muiTheme.palette.background.paper,\n        plot_bgcolor: muiTheme.palette.background.card,\n        font: {\n            color: muiTheme.palette.text.primary\n        },\n        margin: {\n            l: 60,\n            r: 30,\n            t: 30,\n            b: 60\n        },\n        dragmode: 'pan',\n        legend: {\n            orientation: 'h',\n            x: 0,\n            y: 1.02,\n            font: {\n                color: muiTheme.palette.text.primary\n            }\n        },\n    }\n}"],"names":["Plot","dynamic","ssr","loadableGenerated","webpack","resolveWeak","PlotlyBubblePlot","React","_ref","data","dispatch","useDispatch","muiTheme","useMUITheme","_useState","useState","isClient","setIsClient","_useState2","plotlyError","setPlotlyError","xColumn","useSelector","state","settings","bubblePlotXColumn","yColumn","bubblePlotYColumn","maxMarkerSize","bubblePlotMaxMarkerSize","opacity","bubblePlotOpacity","commonPlotlyLayout","useCommonPlotlyLayout","xTitle","concat","yTitle","useEffect","plotData","useMemo","Array","isArray","map","item","index","x","y","name","mode","type","marker","size","customdata","c","Math","min","sqrt","count","line","color","palette","text","primary","width","hovertemplate","error","console","message","layout","_objectSpread","selectdirection","config","responsive","displayModeBar","scrollZoom","modeBarButtonsToRemove","displaylogo","handleClick","useCallback","plotlyData","points","length","condExpr","setSampleCondition","fetchRandomRowData","source","handleSelected","eventData","_","p","join","_jsxs","style","height","display","alignItems","justifyContent","backgroundColor","background","paper","main","flexDirection","gap","children","_jsx","fontSize","minHeight","useResizeHandler","onClick","onSelected","onError","secondary","_ref$xTitle","_ref$yTitle","title","font","xaxis","typography","showticklabels","showline","showgrid","tickfont","yaxis","paper_bgcolor","plot_bgcolor","card","margin","l","r","t","b","dragmode","legend","orientation"],"sourceRoot":""}