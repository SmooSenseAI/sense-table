{"version":3,"file":"static/chunks/980-54a3aea34e710c8d.js","mappings":"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","sources":["webpack://_N_E/./src/constants.ts","webpack://_N_E/./src/store/agColDefsSlice.js","webpack://_N_E/./src/store/boxPlotSlice.js","webpack://_N_E/./src/store/bubblePlotSlice.js","webpack://_N_E/./src/store/columnPreferenceSlice.js","webpack://_N_E/./src/store/dataSlice.js","webpack://_N_E/./src/store/derivedColumnsSlice.js","webpack://_N_E/./src/store/folderBrowserSlice.js","webpack://_N_E/./src/store/heatMapSlice.js","webpack://_N_E/./src/store/histogramSlice.js","webpack://_N_E/./src/store/settingsSlice.js","webpack://_N_E/./src/store/sqlSlice.js","webpack://_N_E/./src/store/toastSlice.js","webpack://_N_E/./src/store/viewingSlice.js","webpack://_N_E/./src/utils/api.js","webpack://_N_E/./src/utils/helpers.js","webpack://_N_E/./src/utils/histogramBins.js","webpack://_N_E/./src/utils/sql/helpers.js","webpack://_N_E/./src/utils/sql/parseFilterItem.js","webpack://_N_E/./src/utils/sql/sql.js","webpack://_N_E/./src/utils/urls.js"],"sourcesContent":["export const ROUTES = {\n    FolderBrowser: 'FolderBrowser',\n    Table: 'Table',\n} as const;\n\nexport type Route = keyof typeof ROUTES;\n\nexport const HEIGHT_BOTTOM_BAR = 32;\n\nexport const TABS = {\n    ColumnNavigation: 'ColumnNavigation',\n    MainTable: 'MainTable',\n    Histogram: 'Histogram',\n    BubblePlot: 'BubblePlot',\n    BoxPlot: 'BoxPlot',\n    HeatMap: 'HeatMap',\n    Gallery: 'Gallery',\n    ColumnFilters: 'ColumnFilters',\n    RowDetails: 'RowDetails',\n    DistributionSummary: 'DistributionSummary',\n    FreeFormSQL: 'FreeFormSQL',\n    BrowseFolder: 'BrowseFolder',\n    Playground: 'Playground',\n} as const;\n\nexport type Tab = keyof typeof TABS;\n\n\nexport const LAYOUT_THREE_COLUMNS = 'Three columns';\nexport const LAYOUT_SIDE_BY_SIDE = 'Side by side';\nexport const LAYOUT_TWO_COLUMNS = 'Two columns';\n\nexport const RENDER_TYPES = {\n    TEXT: 'Text',\n    NUMBER: 'Number',\n    CATEGORY: 'Category',\n    JSON: 'JSON',\n    IFRAME: 'IFrame',\n    LINK: 'Link',\n    VIDEO_URL: 'VideoUrl',\n    IMAGE_URL: 'ImageUrl',\n} as const;\nexport type RenderType = keyof typeof RENDER_TYPES;\n\n\nexport const SENSE_TABLE_PAGE = 'https://smoosenseai.github.io/sense-table/'","import { createSlice } from '@reduxjs/toolkit';\nimport { map, pick } from 'lodash';\nimport { filteredColumnStatsSlice } from '@/store/dataSlice';\nimport { rowDataSlice } from '@/store/dataSlice';\n\nconst initialState = {\n    columnDefs: [],\n    sorting: [],\n    filters: {},\n    baselineFilters: {}\n};\n\n\nexport const agColDefsSlice = createSlice({\n  name: 'agColDefs',\n  initialState: initialState,\n  reducers: {\n    setColumnDefs: (state, action) => {\n      state.columnDefs = action.payload;\n    },\n    setSorting: (state, action) => {\n      state.sorting = action.payload;\n    },\n    updateDef: (state, action) => {\n      const { field, name, value } = action.payload;\n      const colDef = state.columnDefs.find(col => col.field === field);\n      if (colDef) {\n        colDef[name] = value;\n      }\n    },\n    setFilters: (state, action) => {\n      state.filters = action.payload;\n    },\n    setFilterForColumn: (state, action) => {\n      const { field, filter } = action.payload;\n      state.filters[field] = filter;\n    },\n    clearFilterForColumn: (state, action) => {\n      const { field  } = action.payload;\n      delete state.filters[field];\n    },\n\n    setBaselineFilters: (state) => {\n      state.baselineFilters = state.filters;\n    },\n  },\n});\n\nexport const pickAgColDefs = (api) => {\n    return map(api.getColumnDefs(), (col) =>\n        pick(col, [\n          'hide', 'pinned',\n          'field',\n        ])\n      );\n}\n\nconst refreshDataAfterFilterChange = (dispatch) => {\n  dispatch(filteredColumnStatsSlice.actions.refreshAllData());\n  dispatch(rowDataSlice.actions.setShouldRefresh());\n\n}\n\nexport const setColumnFilterAndRefreshData = (dispatch, columnName, filter) => {\n  dispatch(setFilterForColumn({field: columnName, filter}));\n  refreshDataAfterFilterChange(dispatch);\n}\n\nexport const removeColumnFilterAndRefreshData = (dispatch, columnName) => {\n  dispatch(agColDefsSlice.actions.clearFilterForColumn({field: columnName}));\n  refreshDataAfterFilterChange(dispatch);\n};\n\nexport const { setColumnDefs, updateDef, setFilters, setSorting, setFilterForColumn, clearFilterForColumn, setBaselineFilters } = agColDefsSlice.actions;\n\n","import { createDataSlice, initialState } from './dataSlice';\nimport { sqlElements } from '@/utils/sql/sql';\nimport { runQuery } from '@/utils/api';\nimport { sanitizeName } from '@/utils/sql/helpers';\n\nexport const boxPlotSlice = createDataSlice('boxPlot');\n\n\n\nexport const fetchBoxPlotData = ({boxPlotColumns}) => async (dispatch, getState) => {\n  const { data, loading, shouldRefresh } = getState().boxPlot || initialState;\n  const { boxPlotBreakdownColumn } = getState().settings;\n\n  if ((data || loading) && !shouldRefresh) return; // 👈 Already loading or loaded — skip!\n\n\n  dispatch(boxPlotSlice.actions.fetchStart());\n\n  try {\n\n    const boxExpr = (c) => {\n      const e = sanitizeName(c);\n      return `{\n        'min' : MIN(${e}),\n        'max' : MAX(${e}),\n        'std' : STDDEV_POP(${e}),\n        'skewness': SKEWNESS(${e}),\n        'avg' : AVG(${e}),\n        'q25' : QUANTILE_CONT(${e}, 0.25),\n        'q50' : QUANTILE_CONT(${e}, 0.5),\n        'q75' : QUANTILE_CONT(${e}, 0.75)\n      } AS ${e}`;\n      };\n    const elements = sqlElements(getState());\n    const query = `\n    WITH filtered AS (\n          SELECT ${sanitizeName(boxPlotBreakdownColumn)} AS breakdown, \n          ${boxPlotColumns.map(sanitizeName).join(', ')}\n          ${elements.from}\n          ${elements.where}\n      ) SELECT breakdown, COUNT(*) AS count, ${boxPlotColumns.map(c => boxExpr(c)).join(', ')}\n      FROM filtered\n      GROUP BY breakdown\n    `;\n    const data = await runQuery({dispatch, key: 'boxPlot', query: query});\n\n    dispatch(boxPlotSlice.actions.fetchSuccess(data));\n  } catch (err) {\n    console.error(err);\n    dispatch(boxPlotSlice.actions.fetchError(err.message));\n  }\n};","import { createDataSlice, initialState } from './dataSlice';\nimport { sqlElements } from '@/utils/sql/sql';\nimport { runQuery } from '@/utils/api';\nimport { sanitizeName } from '@/utils/sql/helpers';\n\nexport const bubblePlotSlice = createDataSlice('bubblePlot');\n\n\n\nexport const fetchBubblePlotData = ({bubblePlotXColumn, bubblePlotYColumn, xBin, yBin}) => async (dispatch, getState) => {\n  const { data, loading, shouldRefresh } = getState().bubblePlot || initialState;\n  const bubblePlotBreakdownColumn = getState().settings.bubblePlotBreakdownColumn;\n  if ((data || loading) && !shouldRefresh) return; // 👈 Already loading or loaded — skip!\n\n  dispatch(bubblePlotSlice.actions.fetchStart());\n\n  try {\n    const elements = sqlElements(getState());\n    const query = `\n    WITH filtered AS (\n          SELECT \n            ${sanitizeName(bubblePlotXColumn)} AS x,\n            ${sanitizeName(bubblePlotYColumn)} AS y,\n            ${sanitizeName(bubblePlotBreakdownColumn)} AS breakdown\n          ${elements.from}\n          ${elements.where} AND x IS NOT NULL AND y IS NOT NULL\n      ), binned AS (\n      SELECT\n          p.*,\n          FLOOR((p.x - ${xBin.min}) / ${xBin.step})::INT AS bin_x,\n          FLOOR((p.y - ${yBin.min}) / ${yBin.step})::INT AS bin_y\n      FROM filtered AS p\n      )\n      SELECT breakdown, bin_x, bin_y,\n      -- Compute the “bubble” center as the average x and y within that bin\n      AVG(x)            AS x,\n      AVG(y)            AS y,\n      COUNT(*)          AS count\n      FROM binned\n      GROUP BY 1, 2, 3\n    `;\n    const data = await runQuery({dispatch, key: 'bubblePlot', query: query});\n    const grouped = _(data).groupBy('breakdown').toPairs().map(([breakdown, items]) => {\n      const x = _.map(items, 'x');\n      const y = _.map(items, 'y');\n      const customdata = _.map(items, item => {\n        const xMin = item.bin_x * xBin.step + xBin.min;\n        const xMax = xMin + xBin.step;\n        const yMin = item.bin_y * yBin.step + yBin.min;\n        const yMax = yMin + yBin.step;\n        const xCol = sanitizeName(bubblePlotXColumn);\n        const yCol = sanitizeName(bubblePlotYColumn);\n        const condExpr = [\n          `${xCol} >= ${xMin}`,\n          `${xCol} < ${xMax}`,\n          `${yCol} >= ${yMin}`,\n          `${yCol} < ${yMax}`\n        ].join(' AND ');\n        return {condExpr, count: item.count};\n      });\n      return {name: breakdown, x, y, customdata};\n    }).value();\n\n    dispatch(bubblePlotSlice.actions.fetchSuccess(grouped));\n  } catch (err) {\n    console.error(err);\n    dispatch(bubblePlotSlice.actions.fetchError(err.message));\n  }\n};","import { createSlice } from '@reduxjs/toolkit';\n\n\nconst initialState = {\n    data: {},\n};\n\n\nexport const columnPreferenceSlice = createSlice({\n  name: 'columnPreference',\n  initialState: initialState,\n  reducers: {\n    initAllColumnPreference(state, action) {\n      state.data = action.payload;\n    },\n    setColumnPreference: (state, action) => {\n        const { name, ...rest } = action.payload;\n        if (!name) return;\n        state.data[name] = rest;\n    },\n    updateColumnPreference: (state, action) => {\n        const { name, ...rest } = action.payload;\n        if (!name) return;\n        state.data[name] = {...(state.data[name] || {}), ...rest};\n      },\n  },\n});\n\nexport const { setColumnPreference, initAllColumnPreference, updateColumnPreference } = columnPreferenceSlice.actions;\n\n","import { createSlice } from '@reduxjs/toolkit';\n\n\nexport const initialState = {\n  data: null,\n  loading: false,\n  shouldRefresh: false,\n  error: null,\n};\n\nexport const createDataSlice = (sliceName) => createSlice({\n  name: sliceName,\n  initialState,\n  reducers: {\n    setData: (state, action) => {\n      state.data = action.payload;\n    },\n    setShouldRefresh: (state, action) => {\n      state.shouldRefresh = true;\n    },\n    fetchStart: (state) => {\n      state.loading = true;\n      state.error = null;\n      state.shouldRefresh = false;\n    },\n    fetchSuccess: (state, action) => {\n      state.data = action.payload;\n      state.loading = false;\n      state.error = null;\n      state.shouldRefresh = false;\n    },\n    fetchError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n      state.shouldRefresh = false;\n    }\n  }\n});\n\n\nconst validateName = (state, action) => {\n  const name = action.payload?.name;\n  if (!name) alert(`Name is required in ${JSON.stringify(action)}`);\n  if (!state[name]) {\n    state[name] = {};\n  }\n  return name;\n}\n\nexport const createSubnamedDataSlice = (sliceName) => createSlice({\n  name: sliceName,\n  initialState: {},\n  reducers: {\n    resetAllData: (state) => {\n      Object.keys(state).forEach(key => {\n        state[key] = {data: null, loading: false, error: null, shouldRefresh: false};\n      });\n    },\n    refreshAllData: (state) => {\n      Object.keys(state).forEach(key => {\n        state[key].shouldRefresh = true;\n      });\n    },\n    resetData: (state, action) => {\n      const name = validateName(state, action);\n      state[name] = null;\n    },\n    setShouldRefresh: (state, action) => {\n      const name = validateName(state, action);\n      state[name].shouldRefresh = true;\n    },\n    fetchSuccess: (state, action) => {\n      const name = validateName(state, action);\n      state[name] = {data: action.payload, loading: false, error: null, shouldRefresh: false};\n    },\n    fetchStart: (state, action) => {\n      const name = validateName(state, action);\n      state[name].loading = true;\n      state[name].shouldRefresh = false;\n    },\n    fetchError: (state, action) => {\n      const name = validateName(state, action);\n      state[name] = {data: null, loading: false, error: action.payload.error, shouldRefresh: false};\n    },\n  },\n});\n\nexport const columnMetaSlice = createDataSlice('columnMeta');\nexport const baselineColumnStatsSlice = createSubnamedDataSlice('baselineColumnStats');\n\nexport const filteredColumnStatsSlice = createSubnamedDataSlice('filteredColumnStats');\nexport const cardinalitySlice = createSubnamedDataSlice('cardinality');\n\nexport const rowDataSlice = createDataSlice('rowData');\n\nexport const initSettingsSlice = createDataSlice('initSettings');","import { createSlice } from '@reduxjs/toolkit';\nimport { RENDER_TYPES } from '@/constants';\nimport jsonata from 'jsonata';\nimport _ from 'lodash';\n\n\n\n\nexport const matchDerivedColumns = (meta) => {\n  // TODO: this work will be done by AI in the future\n  if ('image_url' in meta && 'bbox' in meta && 'category_name' in meta) {\n    return [{\n      name: 'bbox_url',\n      renderType: RENDER_TYPES.IFRAME,\n      baseUrl: './viz-bbox.html',\n      params: {\n        image: 'image_url',\n        bboxes: '[{\"bbox\": bbox, \"label\": category_name}]',\n        autorange: '\"true\"',\n      },\n    }]\n  } else {\n    return [];\n  }\n}\n\nconst derivedColumnsSlice = createSlice({\n  name: 'derivedColumns',\n  initialState: [],\n  reducers: {\n    addDerivedColumn: (state, action) => {\n      state.push(action.payload);\n    },\n    removeDerivedColumn: (state, action) => {\n      const name = action.payload;\n      return state.filter(column => column.name !== name);\n    },\n\n\n  },\n});\n\nexport const toFullUrl = ({baseUrl, params}) => {\n  return baseUrl + '?' + _.map(params, (v, k) => `${k}=${encodeURIComponent(v)}`).join('&');\n}\n\nconst evaluateExpr = async ({expr, singleRowData}) => {\n  const result = await jsonata(expr).evaluate(singleRowData);\n  if (typeof result === 'object') {\n      return JSON.stringify(result);\n  } else {\n      return result;\n  }\n}\n\nexport const evaluateDictExpressions = async ({params, singleRowData}) => {\n  const keys = _.keys(params);\n  const promises = _.map(keys, (key) => evaluateExpr({expr: params[key], singleRowData}));\n  const results = await Promise.all(promises);\n  return _.zipObject(keys, results);\n}\n\nexport const evaluateAllExpressionsForAllRows = async ({derivedColumns, rowData}) => {\n  for (const row of rowData) {\n    for (const col of derivedColumns) {\n      const params = col.params;\n      const evaluatedParams = await evaluateDictExpressions({params, singleRowData: row});\n      const fullUrl = toFullUrl({baseUrl: col.baseUrl, params: evaluatedParams});\n      row[col.name] = fullUrl;\n    }\n  }\n  return rowData;\n}\n\n\nexport const {\n  addDerivedColumn,\n  removeDerivedColumn,\n} = derivedColumnsSlice.actions;\n\nexport default derivedColumnsSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { lsApi } from '@/utils/api';\nimport path from 'path-browserify';\nimport _ from 'lodash';\n\nconst defaultState = {\n  treeData: [],\n  viewingItemId: '',\n  viewFolderAs: {},\n  expandedItems: []\n};\n\nexport function pathJoin(rootFolder, relPath) {\n  if (rootFolder.startsWith('s3://')) {\n    return 's3://' + path.join(rootFolder.slice(5), relPath);\n  } else {\n    return path.join(rootFolder, relPath);\n  }\n}\n\nexport function pathBasename(fullPath) {\n  if (fullPath.startsWith('s3://') && !fullPath.slice(5).includes('/')) {\n    return fullPath;\n  } else {\n    return path.basename(fullPath);\n  }\n}\n\nexport function pathDirname(fullPath) {\n  if (fullPath.startsWith('s3://')) {\n    const dirname = path.dirname(fullPath.slice(5));\n    return dirname === '.' ? '.' : 's3://' + dirname;\n  } else {\n    return path.dirname(fullPath);\n  }\n}\n\nexport function locateItem(treeNodeList, relPath) {\n  const nextPath = relPath.split('/')[0];\n  const nextNode = treeNodeList.find(item => item.id.split('/').pop() === nextPath);\n  if (!relPath.includes('/')) {\n      return nextNode;\n  } else {\n      return locateItem(nextNode.children, relPath.slice(nextPath.length + 1));\n  }\n}\n\n\n\nfunction idLoading(relPath) {\n  return `loading-${relPath}`;\n}\n\nconst folderBrowserSlice = createSlice({\n  name: 'folderBrowser',\n  initialState: defaultState,\n  reducers: {\n    setViewingItemId: (state, action) => {\n      state.viewingItemId = action.payload;\n    },\n    resetAll: (state) => {\n      Object.keys(defaultState).forEach(key => {\n        state[key] = defaultState[key];\n      });\n    },\n    setExpandedItems: (state, action) => {\n      state.expandedItems = action.payload;\n    },\n    toggleItemExpansion: (state, action) => {\n      const itemId = action.payload;\n\n      state.expandedItems = state.expandedItems.includes(itemId)\n        ? state.expandedItems.filter(id => id !== itemId)\n        : [...state.expandedItems, itemId];\n    },\n    setViewFolderAs: (state, action) => {\n      const { id, viewAs } = action.payload;\n      state.viewFolderAs[id] = viewAs;\n    },\n    updateChildrenSuccess: (state, action) => {\n      const { itemId, children } = action.payload;\n      const formatedChildren = children.map(c => ({\n        id: pathJoin(itemId, c.name),\n        label: c.name,\n        secondaryLabel: c.isDir ? 'Folder' : 'File',\n        ..._.pick(c, ['lastModified', 'isDir', 'size']),\n        children: c.isDir ? [{id: idLoading(pathJoin(itemId, c.name)), label: 'Loading...'}] : [],\n      }));\n\n      if (itemId === '') {\n        state.treeData = formatedChildren;\n      } else {\n        const item = locateItem(state.treeData, itemId);\n        item.children = formatedChildren;\n      }\n    }\n  },\n});\n\n// Async action creator\nexport const updateChildren = (itemId, force=false) => async (dispatch, getState) => {\n  const state = getState();\n  const rootFolder = state.settings.folderBrowserRootFolder;\n\n  async function impl() {\n    const parentPath = pathJoin(rootFolder, itemId);\n    const showHidden = state.settings.folderBrowserShowHiddenFiles;\n    const limit = state.settings.folderBrowserListLimit;\n    const children = await lsApi({ parentPath, showHidden, limit, dispatch });\n    dispatch(folderBrowserSlice.actions.updateChildrenSuccess({ itemId, children }));\n  }\n\n  if (!rootFolder) {\n    return;\n  } else if (itemId === '') {\n    await impl();\n  } else {\n    const item = locateItem(state.folderBrowser.treeData, itemId);\n    if (force || (item &&item.children && item.children.length === 1 && item.children[0].id === idLoading(itemId))) {\n      await impl();\n    }\n  }\n};\n\nexport const { setViewingItemId, setViewFolderAs, setExpandedItems, toggleItemExpansion } = folderBrowserSlice.actions;\n\n\n\nexport default folderBrowserSlice.reducer;\n","import { createDataSlice } from './dataSlice';\nimport { sqlElements } from '@/utils/sql/sql';\nimport { runQuery } from '@/utils/api';\nimport { sanitizeName } from '@/utils/sql/helpers';\nimport _ from 'lodash';\nimport { samplePkListExpr } from '@/utils/sql/helpers';\n\nexport const Y_LABEL_VALUE = '__y__label__value__'\n\nexport const heatMapSlice = createDataSlice('heatMap');\n\nconst computeStats = (data) => {\n  return {min: _.min(data), max: _.max(data), sum: _.sum(data)};\n}\n\nconst pivotData = (data) => {\n  const xLabels = _(data).map('x').uniq().map(String).value();\n\n  const pivotedData = _(data).groupBy('y').map((rows, y) => {\n      const row = _(rows).map(row => [row.x, row]).fromPairs().value();\n      return {...row, [Y_LABEL_VALUE]: y};\n  }).value();\n\n  const allStats = computeStats(_.map(data, 'cnt'));\n\n\n  // Compute max value for each y label\n  const yStats = _.fromPairs(_.map(pivotedData, (row, i) => {\n    const subData = _(row).values().map('cnt').value();\n    return [row[Y_LABEL_VALUE], computeStats(subData)];\n  }));\n\n  const xStats = _.fromPairs(_.map(xLabels, (xLabel, i) => {\n    const subData = _.map(pivotedData, (row) => row[xLabel]?.cnt);\n    return [xLabel, computeStats(subData)];\n  }));\n\n  const rowData = _.map(pivotedData, (row) => {\n    return {\n      rowTotal: yStats[row[Y_LABEL_VALUE]].sum,\n      ...row,\n    };\n  });\n  return {xLabels, rowData, xStats, yStats, allStats};\n}\n\n\nexport const fetchHeatMap = ({heatmapXColumn, heatmapYColumn}) => async (dispatch, getState) => {\n  const { data, loading, shouldRefresh } = getState().heatMap || { data: null, loading: false, shouldRefresh: false };\n\n  if ((data || loading) && !shouldRefresh) return; // 👈 Already loading or loaded — skip!\n\n  dispatch(heatMapSlice.actions.fetchStart());\n\n  try {\n    const elements = sqlElements(getState());\n    const query = `\n    WITH filtered AS (\n          SELECT \n            ${sanitizeName(heatmapXColumn)} AS x, \n            ${sanitizeName(heatmapYColumn)} AS y\n          ${elements.from}\n          ${elements.where}\n      ) SELECT x, y, COUNT(*) AS cnt \n       FROM filtered\n       GROUP BY x, y\n      `;\n    const data = await runQuery({dispatch, key: 'heatMap', query: query});\n    const heatMap = pivotData(data);\n    dispatch(heatMapSlice.actions.fetchSuccess(heatMap));\n  } catch (err) {\n    console.error(err);\n    dispatch(heatMapSlice.actions.fetchError(err.message));\n  }\n};","import { createDataSlice, initialState } from './dataSlice';\nimport { sqlElements } from '@/utils/sql/sql';\nimport { runQuery } from '@/utils/api';\nimport _ from 'lodash';\nimport { padItems } from '@/utils/histogramBins';\nimport { sanitizeName } from '@/utils/sql/helpers';\nimport { isMissing } from '@/utils/helpers';\n\nexport const histogramSlice = createDataSlice('histogram');\n\n\nexport const fetchHistogramData = ({histogramColumn, bin}) => async (dispatch, getState) => {\n  const { data, loading, shouldRefresh } = getState().histogram || initialState;\n  if ((data || loading) && !shouldRefresh) return; // 👈 Already loading or loaded — skip!\n\n  const {histogramBreakdownColumn} = getState().settings;\n\n  dispatch(histogramSlice.actions.fetchStart());\n\n  try {\n    const { min, step, round_to } = bin;\n    const elements = sqlElements(getState());\n    const query = `\n   WITH filtered AS (\n      SELECT \n        ${sanitizeName(histogramColumn)} AS value, \n        ${sanitizeName(histogramBreakdownColumn)} AS breakdown\n      ${elements.from}\n      ${elements.where} AND value IS NOT NULL  \n    )\n    SELECT breakdown, FLOOR((value - ${min}) / ${step}) AS binIdx, \n        COUNT(*) AS cnt\n    FROM filtered\n    GROUP BY 1, 2\n    ORDER BY 1, 2\n `;\n    const data = await runQuery({dispatch, key: 'histogram', query: query});\n\n    const groupped = _(data).groupBy('breakdown').toPairs().map(([breakdown, items]) => {\n      const paddedItems = padItems({min, step, round_to, cntValues: items});\n      const x = _.map(paddedItems, 'value');\n      const y = _.map(paddedItems, 'cnt');\n      const customdata = _.map(paddedItems, item => {\n        const condCol = [`${sanitizeName(histogramColumn)} >= ${item.binMin}`, `${sanitizeName(histogramColumn)} < ${item.binMax}`];\n        const condBreakdown = isMissing(histogramBreakdownColumn) ? [] : [`${sanitizeName(histogramBreakdownColumn)} = '${breakdown}'`];\n        const condExpr = [...condCol, ...condBreakdown].join(' AND ');\n        return {condExpr};\n      });\n      return {name: breakdown, x, y, customdata};\n    }).value();\n\n\n    dispatch(histogramSlice.actions.fetchSuccess(groupped));\n  } catch (err) {\n    console.error(err);\n    dispatch(histogramSlice.actions.fetchError(err.message));\n  }\n};","import { createSlice } from '@reduxjs/toolkit';\nimport { loadLocalStorage } from '@/utils/helpers';\n\n\n\nconst defaultState = {\n  mode: loadLocalStorage('theme') || 'dark',\n  boxPlotBreakdownColumn: null,\n\n\n};\n\nconst settingsSlice = createSlice({\n  name: 'settings',\n  initialState: defaultState,\n  reducers: {\n\n    updateSettings: (state, action) => {\n      const payload = action.payload || {};\n      Object.entries(payload).forEach(([key, value]) => {\n        state[key] = value;\n        if (key === 'mode') {\n          localStorage.setItem('theme', value);\n        }\n      });\n    },\n  },\n});\n\nexport const { updateSettings } = settingsSlice.actions;\nexport default settingsSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\nimport { format } from 'sql-formatter';\n\n\n\n\nconst sqlSlice = createSlice({\n  name: 'sql',\n  initialState: {},\n  reducers: {\n    updateSqlRecord: (state, action) => {\n      const { key, records } = action.payload;\n      if (!(key in state)) {\n        state[key] = {};\n      }\n      Object.entries(records).forEach(([k, v]) => {\n        if (k === 'query') {\n          try {\n            state[key].query = format(v, { language: 'duckdb'}) + '\\n';\n          } catch (error) {\n            state[key].query = v + '\\n';\n            console.warn(error);\n          }\n          state[key].lastUpdated = Date.now();\n        } else {\n          state[key][k] = v;\n        }\n      });\n    },\n\n  },\n});\n\n\nexport const { updateSqlRecord } = sqlSlice.actions;\nexport default sqlSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst defaultState = {\n  open: false,\n  message: '',\n  severity: 'info', // 'error', 'warning', 'info', 'success'\n  autoHideDuration: 6000,\n};\n\nconst toastSlice = createSlice({\n  name: 'toast',\n  initialState: defaultState,\n  reducers: {\n    showToast: (state, action) => {\n      const { message, severity = 'info', autoHideDuration = 6000 } = action.payload;\n      state.open = true;\n      state.message = message;\n      state.severity = severity;\n      state.autoHideDuration = autoHideDuration;\n    },\n    hideToast: (state) => {\n      state.open = false;\n    },\n  },\n});\n\nexport const { showToast, hideToast } = toastSlice.actions;\nexport default toastSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\n\nconst viewingSlice = createSlice({\n  name: 'viewing',\n  initialState: {\n    justClickedColumn: null,\n    justClickedRow: null,\n    pagination: {\n      pageSize: 10,\n      pageNumber: 0,\n    },\n    rowDataSource: null,\n    sampleCondition: 'True',\n    heatmapColumnSort: {},\n    visibleColumns: [],\n  },\n  reducers: {\n    setJustClickedColumn: (state, action) => {\n      state.justClickedColumn = action.payload;\n    },\n    setJustClickedRow: (state, action) => {\n      state.justClickedRow = action.payload;\n    },\n    updatePagination: (state, action) => {\n      state.pagination = {...state.pagination, ...action.payload};\n    },\n    updateCountBaseline: (state, action) => {\n      state.pagination.countBaseline = action.payload;\n    },\n    updateCountFiltered: (state, action) => {\n      state.pagination.countFiltered = action.payload;\n    },\n    setRowDataSource: (state, action) => {\n      state.rowDataSource = action.payload;\n    },\n    setSampleCondition: (state, action) => {\n      state.sampleCondition = action.payload;\n    },\n    toggleHeatmapColumnSort: (state, action) => {\n      const newByRow = action.payload;\n      const orderList = ['desc', 'asc', 'none'];\n      const { byRow, order } = state.heatmapColumnSort;\n      if (byRow === newByRow) {\n        state.heatmapColumnSort = {byRow: newByRow, order: orderList[(orderList.indexOf(order) + 1) % orderList.length]};\n      } else {\n        state.heatmapColumnSort = {byRow: newByRow, order: orderList[0]};\n      }\n    },\n    setFreeFormQuery: (state, action) => {\n      state.freeFormQuery = action.payload;\n    },\n    setVisibleColumns: (state, action) => {\n      state.visibleColumns = action.payload;\n    },\n  },\n});\n\n\n\nexport const setJustClickedColumn = ({dispatch, columnName}) => {\n  const action = viewingSlice.actions.setJustClickedColumn;\n  dispatch(action(columnName));\n  setTimeout(() => {\n    dispatch(action(null));\n  }, 1000);\n}\n\n\n\nexport const {\n  updatePagination, setJustClickedRow, setRowDataSource, setSampleCondition,\n  toggleHeatmapColumnSort,\n  setFreeFormQuery,\n  updateCountBaseline,\n  updateCountFiltered,\n  setVisibleColumns,\n} = viewingSlice.actions;\n\nexport default viewingSlice.reducer;\n","import _ from 'lodash';\nimport { updateSqlRecord } from '@/store/sqlSlice';\nimport { API_PREFIX } from '@/utils/urls';\nimport { showToast } from '@/store/toastSlice';\nimport { needProxy } from '@/utils/urls';\n\nexport const postApi = async ({url, data = {}, dispatch = null}) => {\n    const res = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data)\n      });\n\n    if (!res.ok) {\n      const errorMessage = 'Failed to fetch data from server';\n      if (dispatch) {\n        dispatch(showToast({\n          message: errorMessage,\n          severity: 'error'\n        }));\n      }\n      throw new Error(errorMessage);\n    }\n    const json = await res.json();\n\n    return json;\n}\n\nexport const runQuery = async ({dispatch, key, query, transformResult = 'listOfDicts'}) => {\n  dispatch(updateSqlRecord({key, records: {query, status: 'running', data: null, runtime: null}}));\n  try {\n    const response = await postApi({\n      url: `${API_PREFIX}/query`,\n      data: { query },\n      dispatch,\n    });\n\n    if (response.status === 'error') {\n      console.error(response.error);\n      // Show toast notification for the error\n      dispatch(showToast({\n        message: response.error || 'An error occurred while running the query',\n        severity: 'error'\n      }));\n      dispatch(updateSqlRecord({key, records: {\n        error: response.error || 'An error occurred while running the query',\n        status: 'error',\n      }}));\n      throw new Error(response.error || 'An error occurred while running the query');\n    }\n\n    dispatch(updateSqlRecord({key, records: {\n      runtime: response.runtime,\n      error: response.error,\n      status: response.status,\n      data: response.rows.map(row => _.zipObject(response.column_names, row)),\n    }}));\n\n    switch (transformResult) {\n      case 'listOfDicts':\n        const rowData = response.rows.map((row, index) => ({\n          ..._.zipObject(response.column_names, row), rowIndex: index\n        }));\n        return rowData;\n\n      case 'dictOfLists':\n        return _.zipObject(response.column_names, _.zip(...response.rows));\n      case 'none':\n        return _.pick(response, ['column_names', 'rows']);\n      default:\n        throw new Error(`Invalid way of transforming result: ${transformResult}`);\n    }\n  } catch (error) {\n    console.error(error);\n    dispatch(updateSqlRecord({key, records: {\n      error: error.message,\n      status: 'error',\n    }}));\n    throw error;\n  }\n}\n\nexport const fetchParquetMeta = async ({dispatch, dataFile, sqlKey}) => {\n  const query = `WITH meta AS (\n    SELECT\n        path_in_schema AS column_name,\n        SUM(num_values) AS cntAll,\n        SUM(stats_null_count) AS cntNull,\n        MIN(stats_min_value) AS min,\n        MAX(stats_max_value) AS max\n    FROM parquet_metadata('${dataFile}')\n    GROUP BY path_in_schema\n  )\n  SELECT column_name, column_type, cntAll, cntNull, min, max\n  FROM (DESCRIBE SELECT * FROM read_parquet ('${dataFile}'))\n      LEFT JOIN meta USING (column_name)\n  `;\n  return await runQuery({dispatch, key: sqlKey, query: query});\n}\n\nexport const previewCsv = async ({dispatch, dataFile, sqlKey}) => {\n  const query = `SELECT * FROM read_csv ('${dataFile}') LIMIT 10`;\n  return await runQuery({dispatch, key: sqlKey, query: query});\n}\n\nexport const lsApi = async ({parentPath, showHidden=false, limit=100, dispatch}) => {\n  const response = await fetch(`${API_PREFIX}/ls?path=${encodeURIComponent(parentPath)}&show_hidden=${showHidden}&limit=${limit}`);\n  if (!response.ok) {\n    const errorMessage = 'Failed to fetch directory listing';\n    if (dispatch) {\n      dispatch(showToast({\n        message: errorMessage,\n        severity: 'error'\n      }));\n    }\n    throw new Error(errorMessage);\n  }\n  const json = await response.json();\n\n  return json;\n}\n\n\nexport const batchProxyUrlApi = async ({urls}) => {\n  if (_.every(urls, url => needProxy(url))) {\n    const response = await postApi({\n      url: `${API_PREFIX}/s3-proxy`,\n      data: { urls },\n    });\n    return response;\n  } else {\n    return urls;\n  }\n}\n\n","import _ from 'lodash';\n\n/**\n * Checks if a value is null or undefined\n */\nexport const isMissing = (value) => {\n    if (value === null || value === undefined) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Returns the first non-null/undefined value from the provided arguments\n */\nexport const coalesce = (...args) => {\n    if (args.length > 0) {\n        const found = args.find(value => !isMissing(value));\n        return isMissing(found) ? null : found;\n    } else {\n        throw new Error('No arguments provided to coalesce');\n    }\n}\n\n\n\n/**\n * Loads a JSON value from local storage\n * @param {string} key - The key to load the value from\n * @returns {any} The loaded JSON value, or null if no value is found\n */\nexport const loadLocalJsonStorage = (key) => {\n    const value = loadLocalStorage(key);\n    if (value) {\n        return JSON.parse(value);\n    } else {\n        return null;\n    }\n}\n\nexport const loadLocalStorage = (key) => {\n    if (typeof window !== 'undefined') {\n        return localStorage.getItem(key);\n    } else {\n        return null;\n    }\n}\n\nexport const setEqual = (a, b) => {\n    return _.isEqual(_.sortBy(a), _.sortBy(b));\n}\n\n","import _ from 'lodash';\nimport { round } from 'lodash';\n\n\n\nexport const padItems = ({min, step, round_to, cntValues})  => {\n    /**\n     * For a given list of cnt and value items, pad the list to make it continuous 0, 1, 2, 3, ...\n     */\n\n    const maxBinIdx = _.maxBy(cntValues, 'binIdx')?.binIdx;\n    const itemByIndex = _.fromPairs(_.map(cntValues, item => [item.binIdx, item]));\n\n    return _.range(maxBinIdx + 1).map(i => {\n        const binMin = round(i * step + min, round_to);\n        const binMax = round(binMin + step, round_to);\n        const binLabel = `[${binMin}, ${binMax})`;\n        return {\n          binIdx: i, value: binLabel, binMin, binMax,\n          ...(itemByIndex[i] || {})\n        };\n    });\n}","import { isMissing } from '@/utils/helpers';\nimport _ from 'lodash';\n\nexport const sanitizeValue = (value) => {\n    if (isMissing(value)) {\n        return 'NULL';\n    } else if (typeof value === 'string') {\n        return `'${value}'`;\n    } else if (typeof value === 'number') {\n        return `${value}`;\n    } else if (typeof value === 'boolean') {\n        return value ? 'TRUE' : 'FALSE';\n    } else if (Array.isArray(value)) {\n        return '(' + _(value).map(sanitizeValue).join(',') + ')';\n    } else {\n        throw new Error(`Unknown value type: ${typeof value}`);\n    }\n}\n\nexport const sanitizeName = (name) => {\n    if (isMissing(name)) {\n      return 'NULL';\n    } else if (typeof name !== 'string') {\n        throw new Error(`Expecting a string for name, but got ${typeof name}: ${name}`);\n    } else {\n        name = name.trim();\n        if (name === '') {\n            throw new Error('Empty name');\n        } else if (/^[a-zA-Z0-9_]+$/.test(name)) {\n            return name;\n        } else if (!name.includes('.')) {\n            return `\"${name}\"`;\n        } else {\n            return name.split('.').map(sanitizeName).join('.');\n\n        }\n    }\n  }\n\n","import _ from 'lodash';\nimport { isMissing } from '@/utils/helpers';\nimport { sanitizeValue, sanitizeName } from '@/utils/sql/helpers';\n\n/**\n * Parse text filter to SQL expression. Return null if the filter is not necessary.\n */\nconst parseTextFilter = (name, item) => {\n  const { contains, null: filterNull } = item || {};\n  if (isMissing(contains) || contains === '') {\n    return combineWithFilterNull(name, null, filterNull);;\n  } else {\n    const expr = `CAST(${sanitizeName(name)} AS VARCHAR) LIKE '%${contains}%'`;\n    return combineWithFilterNull(name, expr, filterNull);\n  }\n}\n\nconst parseEnumFilter = (name, item) => {\n  const { including, null: filterNull } = item || {};\n  if (isMissing(including) || including.length === 0) {\n    return combineWithFilterNull(name, null, filterNull);\n  } else {\n    const expr = `${sanitizeName(name)} IN ${sanitizeValue(including)}`;\n    return combineWithFilterNull(name, expr, filterNull);\n  }\n}\n\nconst combineWithFilterNull = (name, expr, filterNull) => {\n  switch (filterNull) {\n    case 'include':\n      return expr ? `${expr} OR ${sanitizeName(name)} IS NULL` : null;\n    case 'exclude':\n      return expr ? `${expr}` : `${sanitizeName(name)} IS NOT NULL`;\n    case 'only':\n      return `${sanitizeName(name)} IS NULL`;\n    case 'N/A':\n      return expr;\n    default:\n      throw new Error(`Unknown null filter: ${filterNull}`);\n  }\n}\n\nconst parseMyRangeFilter = (name, item) => {\n  const { range, null: filterNull } = item || {};\n  if (isMissing(range)) {\n    return combineWithFilterNull(name, null, filterNull);\n  } else if (!Array.isArray(range) || range.length !== 2 || range.some(v => !_.isNumber(v))) {\n    throw new Error(`Invalid range: ${range}`);\n  } else {\n    const rangeExpr = `${sanitizeName(name)} BETWEEN ${range[0]} AND ${range[1]}`;\n    return combineWithFilterNull(name, rangeExpr, filterNull);\n  }\n}\n\nexport const parseFilterItem = (name, item) => {\n    const { filterType, null: filterNull } = item || {};\n    if (isMissing(filterNull)) {\n      throw new Error(`Null filter is required for ${name}`);\n    }\n    switch (filterType) {\n      case 'myText':\n        return parseTextFilter(name, item);\n      case 'myEnum':\n        return parseEnumFilter(name, item);\n      case 'myRange':\n        return parseMyRangeFilter(name, item);\n      default:\n        throw new Error(`Unknown filter type: ${filterType}`);\n    }\n  }\n\n","import _ from 'lodash';\nimport { parseFilterItem } from './parseFilterItem';\nimport { sanitizeName } from './helpers';\n\nexport const toSqlCondition = (filters) => {\n    const sqlList = _.map(filters, (filterItem, columnName) => {\n      try {\n        if (filterItem === null) {\n          return null;\n        }\n        const sql = parseFilterItem(columnName, filterItem);\n        return sql;\n      } catch (error) {\n        console.error(`Error parsing filter for column ${columnName}:`, error);\n        return null;\n      }\n    });\n\n    const expr = sqlList.filter(Boolean).map(sql => `(${sql})`).join(' AND ');\n    return expr;\n  }\n\nexport const constructSqlCondition = ({filters, baselineFilters}) => {\n  const filtersSql = [toSqlCondition(filters), toSqlCondition(baselineFilters)].filter(Boolean).join(' AND ');\n  return filtersSql || 'True';\n}\n\nexport const sqlElements = (state) => {\n  const { tableExpr } = state.dataFile;\n  const { filters, baselineFilters } = state.agColDefs;\n  const { pageSize, pageNumber } = state.viewing.pagination;\n  const { sorting } = state.agColDefs;\n\n  const order = sorting.length === 0 ? '' : `ORDER BY ${sorting.map(s => `${sanitizeName(s.field)} ${s.order.toUpperCase()}`).join(', ')}`;\n  return {\n    from: `FROM ${tableExpr}`,\n    where: `WHERE ${constructSqlCondition({filters, baselineFilters})}`,\n    order,\n    pagination: `LIMIT ${pageSize} OFFSET ${pageNumber * pageSize}`,\n  };\n}\n\n","\nexport const API_PREFIX = './api';\n\nexport const getScheme = (url) => {\n  if (!url) {\n    return '';\n  } else if (url.includes('://')) {\n    return url.split('://')[0].toLowerCase();\n  } else {\n    return '';\n  }\n}\n\nexport const needProxy = (url) => {\n  const scheme = getScheme(url);\n  return !['http', 'https', ''].includes(scheme);\n}\n\nexport const proxyedUrl = (url) => {\n  if (!needProxy(url)) {\n    return url;\n  } else {\n    return `${API_PREFIX}/s3-proxy?url=${encodeURIComponent(url)}`;\n  }\n}\n\nexport const getFileUrl = (fullPath) => {\n  return `${API_PREFIX}/get-file?path=${encodeURIComponent(fullPath)}`;\n}\n\n"],"names":["ROUTES","FolderBrowser","Table","HEIGHT_BOTTOM_BAR","TABS","ColumnNavigation","MainTable","Histogram","BubblePlot","BoxPlot","HeatMap","Gallery","ColumnFilters","RowDetails","DistributionSummary","FreeFormSQL","BrowseFolder","Playground","LAYOUT_THREE_COLUMNS","LAYOUT_SIDE_BY_SIDE","LAYOUT_TWO_COLUMNS","RENDER_TYPES","TEXT","NUMBER","CATEGORY","JSON","IFRAME","LINK","VIDEO_URL","IMAGE_URL","SENSE_TABLE_PAGE","agColDefsSlice","createSlice","name","initialState","columnDefs","sorting","filters","baselineFilters","reducers","setColumnDefs","state","action","payload","setSorting","updateDef","_action$payload","field","value","colDef","find","col","setFilters","setFilterForColumn","_action$payload2","filter","clearFilterForColumn","setBaselineFilters","pickAgColDefs","api","map","getColumnDefs","pick","refreshDataAfterFilterChange","dispatch","filteredColumnStatsSlice","rowDataSlice","setColumnFilterAndRefreshData","columnName","removeColumnFilterAndRefreshData","actions","_agColDefsSlice$actio","boxPlotSlice","createDataSlice","fetchBoxPlotData","_ref","boxPlotColumns","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","getState","_ref3","data","loading","shouldRefresh","boxPlotBreakdownColumn","boxExpr","elements","query","_data","_context","prev","next","boxPlot","settings","abrupt","fetchStart","c","e","sanitizeName","concat","sqlElements","join","from","where","runQuery","key","sent","fetchSuccess","t0","console","error","fetchError","message","stop","_x","_x2","apply","arguments","bubblePlotSlice","fetchBubblePlotData","bubblePlotXColumn","bubblePlotYColumn","xBin","yBin","bubblePlotBreakdownColumn","grouped","bubblePlot","min","step","_","groupBy","toPairs","_ref4","_ref5","_slicedToArray","breakdown","items","x","y","customdata","item","xMin","bin_x","xMax","yMin","bin_y","yMax","xCol","yCol","condExpr","count","columnPreferenceSlice","initAllColumnPreference","setColumnPreference","rest","_objectWithoutProperties","_excluded","updateColumnPreference","_excluded2","_objectSpread","_columnPreferenceSlic","sliceName","setData","setShouldRefresh","validateName","alert","stringify","createSubnamedDataSlice","resetAllData","Object","keys","forEach","refreshAllData","resetData","columnMetaSlice","baselineColumnStatsSlice","cardinalitySlice","initSettingsSlice","matchDerivedColumns","meta","renderType","baseUrl","params","image","bboxes","autorange","derivedColumnsSlice","addDerivedColumn","push","removeDerivedColumn","column","toFullUrl","v","k","encodeURIComponent","evaluateExpr","expr","singleRowData","result","jsonata","evaluate","evaluateDictExpressions","_callee2","promises","results","_context2","Promise","all","evaluateAllExpressionsForAllRows","_ref7","_callee3","_ref6","derivedColumns","rowData","_iterator","_step","row","_iterator2","_step2","evaluatedParams","fullUrl","_context3","_createForOfIteratorHelper","s","n","done","f","finish","t1","_x3","_derivedColumnsSlice$","reducer","defaultState","treeData","viewingItemId","viewFolderAs","expandedItems","pathJoin","rootFolder","relPath","startsWith","path","slice","pathBasename","fullPath","includes","pathDirname","dirname","locateItem","treeNodeList","nextPath","split","nextNode","id","pop","children","length","idLoading","folderBrowserSlice","setViewingItemId","resetAll","setExpandedItems","toggleItemExpansion","itemId","_toConsumableArray","setViewFolderAs","viewAs","updateChildrenSuccess","formatedChildren","label","secondaryLabel","isDir","updateChildren","force","undefined","impl","_impl","parentPath","showHidden","limit","folderBrowserShowHiddenFiles","folderBrowserListLimit","lsApi","folderBrowserRootFolder","folderBrowser","_folderBrowserSlice$a","Y_LABEL_VALUE","heatMapSlice","computeStats","max","sum","pivotData","xLabels","uniq","String","pivotedData","rows","fromPairs","_defineProperty","allStats","yStats","i","subData","values","xStats","xLabel","_row$xLabel","cnt","rowTotal","fetchHeatMap","heatmapXColumn","heatmapYColumn","heatMap","histogramSlice","fetchHistogramData","histogramColumn","bin","histogramBreakdownColumn","round_to","groupped","histogram","paddedItems","padItems","cntValues","condCol","binMin","binMax","condBreakdown","isMissing","mode","loadLocalStorage","settingsSlice","updateSettings","entries","localStorage","setItem","sqlSlice","updateSqlRecord","records","format","language","warn","lastUpdated","Date","now","toastSlice","open","severity","autoHideDuration","showToast","_action$payload$sever","_action$payload$autoH","hideToast","_toastSlice$actions","viewingSlice","justClickedColumn","justClickedRow","pagination","pageSize","pageNumber","rowDataSource","sampleCondition","heatmapColumnSort","visibleColumns","setJustClickedColumn","setJustClickedRow","updatePagination","updateCountBaseline","countBaseline","updateCountFiltered","countFiltered","setRowDataSource","setSampleCondition","toggleHeatmapColumnSort","newByRow","orderList","_state$heatmapColumnS","byRow","order","indexOf","setFreeFormQuery","freeFormQuery","setVisibleColumns","setTimeout","_viewingSlice$actions","postApi","url","_ref$data","_ref$dispatch","res","errorMessage","json","fetch","method","headers","body","ok","Error","_ref3$transformResult","transformResult","response","status","runtime","API_PREFIX","column_names","index","rowIndex","fetchParquetMeta","dataFile","sqlKey","previewCsv","_ref8","_callee4","_context4","_x4","_ref10","_callee5","_ref9","_ref9$showHidden","_ref9$limit","_context5","_x5","batchProxyUrlApi","_ref12","_callee6","_ref11","urls","_context6","needProxy","_x6","coalesce","_len","args","Array","_key","found","getItem","setEqual","a","b","_$maxBy","maxBinIdx","binIdx","itemByIndex","round","sanitizeValue","isArray","trim","test","combineWithFilterNull","filterNull","parseFilterItem","filterType","contains","parseTextFilter","including","parseEnumFilter","range","some","rangeExpr","parseMyRangeFilter","toSqlCondition","filterItem","Boolean","sql","constructSqlCondition","tableExpr","_state$agColDefs","agColDefs","_state$viewing$pagina","viewing","toUpperCase","scheme","toLowerCase","getScheme","proxyedUrl","getFileUrl"],"sourceRoot":""}