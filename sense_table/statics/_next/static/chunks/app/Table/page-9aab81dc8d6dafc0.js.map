{"version":3,"file":"static/chunks/app/Table/page-9aab81dc8d6dafc0.js","mappings":"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","sources":["webpack://_N_E/?91bb","webpack://_N_E/./src/components/debugging/InspectColumnMeta.js","webpack://_N_E/./src/components/bottomBar/table/IconAnalyticsSettings.js","webpack://_N_E/./src/components/debugging/InspectSql.js","webpack://_N_E/./src/components/bottomBar/table/IconLayoutSettings.js","webpack://_N_E/./src/components/bottomBar/table/TableBottomBar.js","webpack://_N_E/./src/hooks/useSqlStatus.js","webpack://_N_E/./src/components/elements/PlaceHolder.js","webpack://_N_E/./src/components/layout/MyFlexLayout.js","webpack://_N_E/./src/components/table/RandomSampling.js","webpack://_N_E/./src/components/table/PaginationBar.js","webpack://_N_E/./src/components/table/AGConfig.js","webpack://_N_E/./src/components/table/Table.js","webpack://_N_E/./src/components/ColumnNavigation/ColumnItem.js","webpack://_N_E/./src/components/ColumnNavigation/ItemContainer.js","webpack://_N_E/./src/components/ColumnNavigation/CustomDragLayer.js","webpack://_N_E/./src/components/ColumnNavigation/ListContainer.js","webpack://_N_E/./src/components/elements/RainbowUrl.js","webpack://_N_E/./src/components/derivedColumns/ParamsURL.js","webpack://_N_E/./src/components/derivedColumns/DerivedColumnEdit.js","webpack://_N_E/./src/components/derivedColumns/DerivedColumnItem.js","webpack://_N_E/./src/components/derivedColumns/DerivedColumns.js","webpack://_N_E/./src/components/ColumnNavigation/ColumnNavigation.js","webpack://_N_E/./src/components/elements/IFrameVisualization.js","webpack://_N_E/./src/components/gallery/GalleryItem.js","webpack://_N_E/./src/components/elements/SelectColumnInSettings.js","webpack://_N_E/./src/components/gallery/GalleryControls.js","webpack://_N_E/./src/components/gallery/Gallery.js","webpack://_N_E/./src/components/RowDetails.js","webpack://_N_E/./src/hooks/useDataFile.js","webpack://_N_E/./src/components/layout/VerticalSplitBox.js","webpack://_N_E/./src/components/filters/ColumnFilterList.js","webpack://_N_E/./src/components/boxPlot/BoxPlotControls.js","webpack://_N_E/./src/components/elements/HorizontalBoxPlot.js","webpack://_N_E/./src/components/boxPlot/BoxPlot.js","webpack://_N_E/./src/components/heatmap/HeatmapRowHeader.js","webpack://_N_E/./src/components/heatmap/colDefs.js","webpack://_N_E/./src/utils/redBlueColorScale.js","webpack://_N_E/./src/components/heatmap/HeatmapSettings.js","webpack://_N_E/./src/components/heatmap/HeatmapControls.js","webpack://_N_E/./src/components/heatmap/HeatmapTable.js","webpack://_N_E/./src/components/histogram/HistogramSettings.js","webpack://_N_E/./src/components/elements/plotly/PlotlyHelpCard.js","webpack://_N_E/./src/components/histogram/HistogramControls.js","webpack://_N_E/./src/components/histogram/Histogram.js","webpack://_N_E/./src/components/bubblePlot/BubblePlotSettings.js","webpack://_N_E/./src/components/bubblePlot/BubblePlotControls.js","webpack://_N_E/./src/components/bubblePlot/BubblePlot.js","webpack://_N_E/./src/components/table/DistributionSummary.js","webpack://_N_E/./src/components/freeformSql/constants.js","webpack://_N_E/./src/components/freeformSql/FreeFormQueryEditor.js","webpack://_N_E/./src/components/freeformSql/FreeFormQueryResult.js","webpack://_N_E/./src/components/layout/FreeFormSQL.js","webpack://_N_E/./src/components/layout/TabularSliceDice.js","webpack://_N_E/./src/components/layout/utils.ts","webpack://_N_E/./src/store/dataFileSlice.js","webpack://_N_E/./src/store/layoutSlice.ts","webpack://_N_E/./src/store/store.js"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"/Users/senlin/Work/sense-table-ui/src/components/layout/TopLevelPage.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/senlin/Work/sense-table-ui/src/components/layout/TabularSliceDice.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/senlin/Work/sense-table-ui/src/components/bottomBar/table/TableBottomBar.js\")","import { useAllColumnsMeta } from '@/hooks/useApiData';\nimport { BasicTable } from '@/components/elements/BasicTable';\nimport { useMemo, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport _ from 'lodash';\n\n\n\nconst InspectColumnMeta = () => {\n  const { data } = useAllColumnsMeta();\n  const cardinality = useSelector(state => state.cardinality);\n  const { data: columnPreference } = useSelector(state => state.columnPreference) || {};\n\n  const rowData = useMemo(() => {\n    return data?.initialOrder?.map(c => {\n      const meta = data.meta[c];\n\n      return {\n        name: c,\n        duckdbType: meta.duckdbType,\n        agType: meta.agType,\n        meta: {\n          ..._.omit(meta, ['name', 'duckdbType', 'agType']), min: String(meta.min), max: String(meta.max),\n        },  cardinality: cardinality[c]?.data,\n        preference: columnPreference[c],\n      }\n    });\n  }, [data, cardinality, columnPreference]);\n\n  const getAllKeys = useCallback((field) => {\n    return _(rowData).map(r => _.keys(r[field])).flatten().uniq().value();\n  }, [rowData]);\n\n  const overridingColDefs = useMemo(() => {\n    return {\n      name: {\n        pinned: 'left',\n      },\n      meta: {\n        children: getAllKeys('meta').map(c => ({\n          field: `meta.${c}`,\n          headerName: c,\n          columnGroupShow: c === 'isPrimitive' ? 'close' : 'open',\n        })),\n      },\n      cardinality: {\n        children: getAllKeys('cardinality').map(c => ({\n          field: `cardinality.${c}`,\n          headerName: c,\n          columnGroupShow: c === 'cardinality' ? 'close' : 'open',\n        })),\n      },\n      preference: {\n        children: getAllKeys('preference').map(c => ({\n          field: `preference.${c}`,\n          headerName: c,\n        })),\n      },\n    };\n  }, [getAllKeys]);\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n      <BasicTable initRowData={rowData} overridingColDefs={overridingColDefs} />\n  );\n};\n\nexport default InspectColumnMeta;","import React from \"react\";\nimport { Box } from \"@mui/material\";\nimport { BottomIconCard } from \"@/components/bottomBar/BottomIconCard\";\nimport InsightsOutlinedIcon from '@mui/icons-material/InsightsOutlined';\nimport SliderInSettings from \"@/components/settings/SliderInSettings\";\n\nexport const IconAnalyticsSettings = React.memo(function IconAnalyticsSettings() {\n\n    return (\n    <Box sx={{flex: 0}}>\n        <BottomIconCard\n            title=\"Analytics settings\"\n            icon={<InsightsOutlinedIcon/>}\n            width={400}\n            height={600}\n          >\n            <SliderInSettings settingKey=\"heightOfColumnDistribution\"/>\n            <SliderInSettings settingKey=\"histogramNumberOfBins\"/>\n            <SliderInSettings settingKey=\"thresholdCategorical\"/>\n        </BottomIconCard>\n    </Box>\n  );\n});","import { BasicTable } from '@/components/elements/BasicTable';\nimport React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport _ from 'lodash';\nimport SqlCard from '@/components/elements/SqlCard';\nimport useMUITheme from '@/hooks/useMUITheme';\n\nconst InspectSql = React.memo(function InspectSql() {\n\n  const data = useSelector(state => state.sql);\n  const muiTheme = useMUITheme();\n\n  const rowData = useMemo(() => {\n    return Object.entries(data).map(([key, value]) => ({\n      key, details: key,\n      ..._.pick(value, ['lastupdated', 'status', 'runtime', 'error']),\n    }));\n  }, [data]);\n\n  const overridingColDefs = useMemo(() => {\n    return {\n      key: {\n        pinned: 'left',\n      },\n      status: {\n        cellStyle: params => {\n          switch (params.value) {\n            case 'success':\n              return {color: muiTheme.palette.success.main};\n            case 'error':\n              return {color: muiTheme.palette.error.main};\n            case 'running':\n              return {color: muiTheme.palette.warning.main};\n            default:\n              return {};\n          }\n        }\n      },\n      runtime: {\n        cellStyle: params => ({\n          color: params.value < 1 ? muiTheme.palette.text.secondary : muiTheme.palette.warning.main,\n        }),\n      },\n      details: {\n        cellRenderer: params => <SqlCard sqlKey={params.data.key} />,\n      }\n    };\n  }, [muiTheme]);\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n      <BasicTable initRowData={rowData} overridingColDefs={overridingColDefs} />\n  );\n});\n\nInspectSql.displayName = 'InspectSql';\n\nexport default InspectSql;","import React from \"react\";\nimport { IconButton } from \"@mui/material\";\nimport { BottomIconCard } from \"@/components/bottomBar/BottomIconCard\";\nimport { JsonBox } from '@/components/elements/JsonBox';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SectionHeader } from \"@/components/elements/displays\";\nimport { setTargetLayout } from \"@/store/layoutSlice\";\nimport { LayoutIconSideBySide, LayoutIconThreeColumns, LayoutIconTwoColumns } from \"@/utils/icons\";\nimport { SX_TEXT_HOVER } from \"@/utils/styles\";\nimport { MyTooltip } from \"@/components/elements/displays\";\nimport { BottomSection } from '@/components/bottomBar/BottomBarWrapper';\nimport MoreVertOutlinedIcon from '@mui/icons-material/MoreVertOutlined';\nimport { LAYOUT_TWO_COLUMNS, LAYOUT_SIDE_BY_SIDE, LAYOUT_THREE_COLUMNS } from '@/constants';\n\nconst IconLayoutShortcut = React.memo(function IconLayoutShortcut({icon, presetName}) {\n  const dispatch = useDispatch();\n  const presets = useSelector(state => state.layout.presets);\n\n\n  const handleClick = () => {\n    dispatch(setTargetLayout(presets[presetName]));\n  }\n\n  return (\n    <MyTooltip title={presetName}>\n       <IconButton size=\"small\"\n          onClick={handleClick}\n          sx={{\n            ...SX_TEXT_HOVER\n          }}\n          >\n            {icon}\n      </IconButton>\n    </MyTooltip>\n\n  );\n});\n\nexport const LayoutSection = React.memo(function LayoutSection({}) {\n  const currentLayout = useSelector(state => state.layout.current);\n\n  return (\n    <BottomSection title=\"Layout\">\n       <IconLayoutShortcut icon={<LayoutIconThreeColumns />} presetName={LAYOUT_THREE_COLUMNS} />\n       <IconLayoutShortcut icon={<LayoutIconTwoColumns />} presetName={LAYOUT_TWO_COLUMNS} />\n       <IconLayoutShortcut icon={<LayoutIconSideBySide />} presetName={LAYOUT_SIDE_BY_SIDE} />\n\n\n        <BottomIconCard title=\"More\" icon={<MoreVertOutlinedIcon/>}>\n          <SectionHeader title=\"Current layout\" />\n          <JsonBox obj={currentLayout}/>\n        </BottomIconCard>\n    </BottomSection>\n  );\n});\n","\"use client\";\n\nimport { Box, Typography } from '@mui/material';\nimport React from 'react';\nimport BottomBarWrapper from '@/components/bottomBar/BottomBarWrapper';\nimport { useSelector } from 'react-redux';\nimport { BottomSection } from '@/components/bottomBar/BottomBarWrapper';\nimport { BottomIconCard } from \"@/components/bottomBar/BottomIconCard\";\nimport { SQLIcon } from '@/utils/icons';\nimport InspectState from '@/components/debugging/InspectState';\nimport SdCardOutlinedIcon from '@mui/icons-material/SdCardOutlined';\nimport ViewColumnOutlinedIcon from '@mui/icons-material/ViewColumnOutlined';\nimport InspectColumnMeta from '@/components/debugging/InspectColumnMeta';\nimport { BottomStatus } from '@/components/bottomBar/BottomBarWrapper';\nimport { IconAnalyticsSettings } from '@/components/bottomBar/table/IconAnalyticsSettings';\nimport InspectSql from '@/components/debugging/InspectSql';\nimport { LayoutSection } from './IconLayoutSettings';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { useSqlStatus } from '@/hooks/useSqlStatus';\nimport { VerticalDivider } from '@/components/bottomBar/BottomBarWrapper';\nimport { SX_TEXT_HOVER } from '@/utils/styles';\nimport { MyTooltip } from '@/components/elements/displays';\n\nconst SectionDebug = () => {\n  const enableDebugging = useSelector(state => state.settings.enableDebugging);\n  if (!enableDebugging) return null;\n    return (\n      <BottomSection title=\"Debug\">\n          <BottomIconCard title=\"Inspect State\" icon={<SdCardOutlinedIcon/>}>\n                <InspectState />\n            </BottomIconCard>\n          <BottomIconCard title=\"Inspect column metadata\" icon={<ViewColumnOutlinedIcon/>} initMaximized={true}>\n              <InspectColumnMeta />\n          </BottomIconCard>\n\n\n      </BottomSection>\n    )\n}\n\nconst SqlStatusCount = ({count, color, meaning}) => {\n  return (\n    <MyTooltip title={`${count} ${meaning}`}>\n      <Typography sx={{color}} id={`sql-status-count-${meaning}`}>{count}</Typography>\n    </MyTooltip>\n  )\n}\nconst SqlStatus = () => {\n  const {success = 0, error = 0, running = 0} = useSqlStatus();\n  return (\n    <>\n        <VerticalDivider />\n        <Box sx={{display: 'flex', flexDirection: 'row', alignItems: 'center', gap: 1}}>\n            <BottomIconCard title=\"Inspect SQL\" icon={<SQLIcon/>} initMaximized={true}>\n                <InspectSql />\n            </BottomIconCard>\n            <SqlStatusCount count={success} color=\"success.main\" meaning=\"success\" />\n            <SqlStatusCount count={error} color=\"error.main\" meaning=\"error\" />\n            <SqlStatusCount count={running} color=\"warning.main\" meaning=\"running\" />\n        </Box>\n\n    </>\n  )\n}\n\nconst TableBottomBar = React.memo(function TableBottomBar() {\n    const filePath = useSelector(state => state.dataFile.filePath);\n    const cntRows = useSelector(state => state.viewing.pagination.countFiltered);\n    const sorting = useSelector(state => state.agColDefs.sorting);\n    const countColumns = useSelector(createSelector(\n        state => state.columnMeta.data,\n        (data) => data?.initialOrder?.length\n    ));\n\n\n    return (\n        <BottomBarWrapper settings={<IconAnalyticsSettings />}>\n            <BottomStatus k=\"File\" v={filePath}/>\n            <BottomStatus k=\"Rows\" v={cntRows ? cntRows.toLocaleString() : 'N/A'}/>\n            <BottomStatus k=\"Columns\" v={countColumns ? countColumns.toLocaleString() : 'N/A'}/>\n            <BottomStatus k=\"Sorting\" v={sorting.length ? sorting.map(i => `${i.field} ${i.order.toUpperCase()}`).join(', ') : 'N/A'}/>\n            <SqlStatus />\n            <Box sx={{flex: 1}}></Box>\n            <LayoutSection />\n\n            <SectionDebug />\n        </BottomBarWrapper>\n    );\n});\n\nexport default TableBottomBar;","import { useSelector } from \"react-redux\"\nimport { createSelector } from \"@reduxjs/toolkit\";\nimport _ from 'lodash';\n\nexport const useSqlStatus = () => {\n    const counts = useSelector(createSelector(\n        state => state.sql,\n        sql => _.countBy(sql, 'status')\n    ));\n\n    return counts;\n}\n\n\n\n","import React from 'react';\nimport { Box, Typography, CircularProgress } from '@mui/material';\n\n\nexport const PlaceHolder = React.memo(function PlaceHolder({children}) {\n    return (\n        <Box sx={{\n            backgroundColor: 'background.paper',\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center'\n        }}>\n            {children}\n        </Box>\n    )\n});\n\nexport const TextPlaceHolder = React.memo(function TextPlaceHolder({text}) {\n    return (\n        <PlaceHolder>\n            <Typography variant=\"h6\" color=\"text.secondary\">\n                {text}\n            </Typography>\n        </PlaceHolder>\n    )\n});\n\n\nexport const SpinningPlaceHolder = React.memo(function SpinningPlaceHolder() {\n    return (\n        <PlaceHolder>\n            <CircularProgress />\n        </PlaceHolder>\n    )\n});","import { Layout, Model } from 'flexlayout-react';\nimport { useSelector } from 'react-redux';\nimport 'flexlayout-react/style/combined.css';\nimport { useState } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport React from 'react';\nimport { FLEX_LAYOUT_GLOBAL } from '@/components/layout/utils';\nimport { TextPlaceHolder } from '@/components/elements/PlaceHolder';\nimport { saveCurrentLayout, setTargetLayout } from '@/store/layoutSlice';\nimport { useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst MyFlexLayout = ({modelJson, tabComponents}) => {\n  const mode = useSelector((state) => state.settings.mode);\n  const dispatch = useDispatch();\n  const initialModel = {...modelJson, global: FLEX_LAYOUT_GLOBAL};\n  const [model, setModel] = useState(Model.fromJson(initialModel));\n  const targetLayout = useSelector(state => state.layout.target);\n\n\n  useEffect(() => {\n    if (targetLayout) {\n      setModel(Model.fromJson({...targetLayout, global: FLEX_LAYOUT_GLOBAL}));\n      dispatch(setTargetLayout(null));\n    }\n    dispatch(saveCurrentLayout(model.toJson()));\n  }, [model, dispatch, targetLayout]);\n\n  const factory = (node) => {\n    const componentName = node.getComponent();\n    const component = tabComponents[componentName];\n    return component ? (\n      <Box id={`flexlayout-tabbody-${componentName}`} sx={{\n        padding: 0, height: '100%', width: '100%'\n      }}>\n        {component}\n      </Box>\n    ) : <TextPlaceHolder text={componentName} />;\n\n  };\n\n  const renderTab = (node, renderValues) => {\n    const isSelected = node.isSelected();\n    const tabName = node.getName();\n    const color = isSelected ? 'text.primary' : 'text.secondary';\n    renderValues.content = (\n      <Box\n        id={`flexlayout-tabheader-${tabName}`}\n        sx={{\n          color, pl: 1, pr: 1, margin: 0, gap: 1, height: 30,\n          color: isSelected ? 'text.primary' : 'text.secondary',\n          borderRadius: 1, display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n        <Typography variant=\"body1\" sx={{}}>{tabName}</Typography>\n      </Box>\n    );\n  };\n\n  const onModelChange = useCallback((model, action) => {\n    dispatch(saveCurrentLayout(model.toJson()));\n  }, [dispatch]);\n\n  return (\n    <Box className={`flexlayout__theme_${mode}`} sx={{\n        height: '100%', width: '100%',\n        position: 'relative'\n    }}>\n\n      <Layout\n        className=\"flexlayout\"\n        model={model}\n        factory={factory}\n        useVisibility={true}\n        onRenderTab={renderTab}\n        onModelChange={onModelChange}\n      />\n    </Box>\n  );\n};\n\nexport default MyFlexLayout;","import React from 'react';\nimport { Box } from '@mui/material';\nimport { MyButton } from '@/components/elements/Controls';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchRandomRowData } from '@/store/rowDataSlice';\nimport { isMissing } from '@/utils/helpers';\n\nconst RandomSampling = React.memo(function RandomSampling() {\n    const dispatch = useDispatch();\n    const pageSize = useSelector((state) => state.viewing.pagination.pageSize);\n    const sampleCondition = useSelector((state) => state.viewing.sampleCondition);\n\n    const handleClick = () => {\n        dispatch(fetchRandomRowData({source: `${pageSize} rows from random sampling`}));\n    }\n\n    if (isMissing(sampleCondition)) {\n        return null;\n    }\n\n  return (\n    <Box sx={{flex:0}}>\n        <MyButton onClick={handleClick} variant='outlined'>\n            Random\n        </MyButton>\n    </Box>\n  );\n});\n\nRandomSampling.displayName = 'RandomSampling';\n\nexport default RandomSampling;","import { Box, Typography } from '@mui/material';\nimport { FilteredCount } from '@/components/filters/FilteredCounts';\nimport { isMissing } from '@/utils/helpers';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updatePagination } from '@/store/viewingSlice';\nimport { rowDataSlice } from '@/store/dataSlice';\nimport TablePagination from '@mui/material/TablePagination';\nimport React from 'react';\nimport { shallowEqual } from 'react-redux';\nimport { MyButton } from '@/components/elements/Controls';\nimport { setRowDataSource, setSampleCondition } from '@/store/viewingSlice';\nimport SqlCard from '@/components/elements/SqlCard';\nimport { SettingsCard } from '@/components/elements/ClickCard';\nimport RandomSampling from '@/components/table/RandomSampling';\nimport SliderInSettings from '@/components/settings/SliderInSettings';\n\nconst PaginationBar = React.memo(() => {\n  const dispatch = useDispatch();\n  const pagination = useSelector((state) => state.viewing.pagination, shallowEqual);\n  const { pageSize, pageNumber, } = pagination;\n  const countBaseline = useSelector(state => state.viewing.pagination.countBaseline);\n  const countFiltered = useSelector(state => state.viewing.pagination.countFiltered);\n  const rowDataSource = useSelector((state) => state.viewing.rowDataSource, shallowEqual);\n\n  if (isMissing(countFiltered) || isMissing(countBaseline)) {\n    return '';\n  }\n\n  const handleChangePage = (event, newPage) => {\n      dispatch(updatePagination({pageNumber: newPage}));\n      dispatch(rowDataSlice.actions.setShouldRefresh());\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    const newPageSize = parseInt(event.target.value, 10);\n    dispatch(updatePagination({pageSize: newPageSize}));\n    dispatch(rowDataSlice.actions.setShouldRefresh());\n  }\n\n\n  const backToTable = () => {\n    dispatch(rowDataSlice.actions.setShouldRefresh());\n    dispatch(setRowDataSource('Table'));\n    dispatch(setSampleCondition('True'));\n  }\n\n  const tableSettings = (\n    <SettingsCard title=\"Table settings\">\n      <SliderInSettings settingKey=\"heightOfColumnDistribution\"/>\n      <SliderInSettings settingKey=\"tableMaxRowHeight\"/>\n      <SliderInSettings settingKey=\"tableDefaultColumnWidth\"/>\n    </SettingsCard>\n  );\n\n  const content = () => {\n    if (isMissing(rowDataSource) || rowDataSource === 'Table') {\n      return (<>\n        <RandomSampling />\n        <TablePagination\n          component=\"div\"\n          size=\"small\"\n          count={countFiltered}\n          labelDisplayedRows={({from, to}) => `Showing ${from.toLocaleString()} to ${to.toLocaleString()}`}\n          page={pageNumber}\n          onPageChange={handleChangePage}\n          labelRowsPerPage='Page size'\n          rowsPerPage={pageSize}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n          showFirstButton={true}\n          showLastButton={true}\n          sx={{\n            minHeight: 36,\n            '.MuiTablePagination-toolbar': {\n              minHeight: '36px',\n              my: 0, py: 0,\n            },\n            '.MuiTablePagination-selectLabel, .MuiTablePagination-displayedRows': {\n              fontSize: '0.75rem',\n              my: 0, py: 0,\n            },\n            '.MuiTablePagination-select': {\n              my: 0, py: 0,\n            },\n          }}\n        />\n        <Box sx={{flex: 1}}></Box>\n\n        {countAll}\n        <SqlCard sqlKey=\"rowData\" />\n        {tableSettings}\n      </>);\n\n    } else {\n      return (<>\n          <RandomSampling />\n          <Typography variant=\"body2\" sx={{margin: 1, textOverflow: 'ellipsis', overflow: 'hidden', whiteSpace: 'auto'}}>Showing {rowDataSource}</Typography>\n          <Box sx={{flex: 1}}></Box>\n          <MyButton onClick={backToTable}>Back to Table</MyButton>\n          <SqlCard sqlKey=\"samples\" />\n          {tableSettings}\n        </>);\n    }\n  }\n  const countAll = <FilteredCount countBaseline={countBaseline} countFiltered={countFiltered} label=\"Total\"/>;\n\n  return <Box sx={{\n    gap: 1, backgroundColor: 'background.card',\n    px: 1,\n    display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between',\n    }}>\n\n    {content()}\n  </Box>;\n\n});\n\nPaginationBar.displayName = 'PaginationBar';\n\nexport default PaginationBar;","\n\nexport const pinnedTopData = [\n    {isTopRow: true},\n  ];\n\nexport const gridOptions = {\n  domLayout:\"normal\",\n  animateRows: false,\n  pagination: false,\n  headerHeight: 45,\n  suppressColumnVirtualisation: true,\n  suppressRowVirtualisation: true,\n};\n","import { useDispatch } from 'react-redux';\nimport { AgGridReact } from 'ag-grid-react';\nimport { AllCommunityModule, ModuleRegistry } from 'ag-grid-community';\nimport { Box, Typography } from '@mui/material';\nimport _ from 'lodash';\nimport PaginationBar from './PaginationBar';\nimport React from 'react';\nimport { useRowData } from '@/hooks/useApiData';\nimport { setSorting } from '@/store/agColDefsSlice';\nimport { rowDataSlice } from '@/store/dataSlice';\nimport { pinnedTopData, gridOptions } from './AGConfig';\nimport useAGGridTheme from '@/hooks/useAGGridTheme';\nimport { useRef, useEffect } from 'react';\nimport { store } from '@/store/store';\nimport { isMissing } from '@/utils/helpers';\nimport { setColumnDefs, pickAgColDefs } from '@/store/agColDefsSlice';\nimport { setJustClickedRow, setVisibleColumns } from '@/store/viewingSlice';\nimport { useAllColumnsMeta } from '@/hooks/useApiData';\nimport { useSelector } from 'react-redux';\nimport { useExpandedColumnDefs, useDefaultColDef } from '@/hooks/useColumnDefs';\n// Register all Community features\nModuleRegistry.registerModules([AllCommunityModule]);\n\n\nconst Table = React.memo(() => {\n  const gridRef = useRef();\n  const dispatch = useDispatch();\n  useAllColumnsMeta();\n  const { data, loading, error } = useRowData();\n  const agGridTheme = useAGGridTheme({noCellPadding: true});\n  const defaultColDef = useDefaultColDef();\n\n  const expandedColumnDefs = useExpandedColumnDefs();\n\n\n  useEffect(() => {\n    const unsubscribe = store.subscribe(() => {\n      const _state = store.getState();\n      const justClickedColumn = _state.viewing.justClickedColumn;\n      if (!isMissing(justClickedColumn)) {\n        runGridApi(api => api.ensureColumnVisible(justClickedColumn, 'start'));\n      }\n\n    });\n    return unsubscribe;\n  }, []);\n\n\n  const handleSortChanged = (params) => {\n    const newSorting = _(params.api.getColumns()).filter(col => col.sortIndex !== null).map(col => ({\n      field: col.colDef.field,\n      order: col.sort,\n      sortIndex: col.sortIndex\n    })).sortBy('sortIndex').value();\n\n    dispatch(setSorting(newSorting));\n    dispatch(rowDataSlice.actions.setShouldRefresh());\n    return false;\n  };\n\n  const runGridApi = (func) => {\n    const api = gridRef.current?.api;\n    if (!isMissing(api)) {\n      func(api);\n    }\n  }\n\n  const handleColumnChange = (params) => {\n    const newDefs = pickAgColDefs(params.api);\n    dispatch(setColumnDefs(newDefs));\n    updateVisibleColumns(params);\n  };\n\n  const handleRowClicked = (params) => {\n    if (!params.data.isTopRow) {\n      dispatch(setJustClickedRow(params.data.rowIndex));\n    }\n  }\n\n  const updateVisibleColumns = _.debounce((params) => {\n    const {left, right} = params.api.getHorizontalPixelRange();\n\n    const visibleColumns = _(params.api.getAllDisplayedColumns()).filter(\n      c => c.getLeft() >= left - 10 && c.getLeft() + c.getActualWidth() <= right + 10\n    ).map(c => c.colDef.field).value();\n\n    dispatch(setVisibleColumns(visibleColumns));\n  }, 100);\n\n  const handleBodyScrolled = (params) => {\n    updateVisibleColumns(params);\n  }\n\n\n\n  const table = (\n    <AgGridReact\n      ref={gridRef}\n      theme={agGridTheme}\n      pinnedTopRowData={pinnedTopData}\n      onSortChanged={handleSortChanged}\n      rowData={data}\n      columnDefs={expandedColumnDefs}\n      defaultColDef={defaultColDef}\n      {...gridOptions}\n      onColumnMoved={handleColumnChange}\n      onColumnVisible={handleColumnChange}\n      onRowClicked={handleRowClicked}\n      onBodyScroll={handleBodyScrolled}\n  />\n  );\n\n  if (error) {\n    return <Box sx={{padding: 2}}>\n      <Typography variant=\"body1\" color=\"error\">{error}</Typography>\n    </Box>\n  }\n\n  return (\n\n    <Box\n      sx={{ width: `100%`, height: '100%', display: 'flex', flexDirection: 'column' }}\n      id='main-table-container'\n    >\n      <Box sx={{flex: 1, width: '100%', flexGrow: 1, overflow: 'auto'}}>\n        {table}\n      </Box>\n      <Box sx={{ width: '100%', flex: 0}}>\n        <PaginationBar />\n\n      </Box>\n    </Box>\n  );\n});\n\nTable.displayName = 'Table';\n\nexport default Table;","import { useDispatch } from 'react-redux';\nimport { ListItem, ListItemText, ListItemButton } from '@mui/material';\nimport { RenderTypeIcon } from '@/components/IconControls/RenderTypeIcon';\nimport { setJustClickedColumn } from '@/store/viewingSlice';\nimport { highlightMatch } from '@/utils/StringsUtils';\nimport { ToggleColumnPinIcon } from '@/components/IconControls/ColumnPinIcon';\nimport ColumnHideIcon from '@/components/IconControls/ColumnHideIcon';\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useSingleColumnPreference } from '@/hooks/useColumnPreference';\nimport { FloatingRightContainer } from '@/components/elements/containers';\n\nexport const ColumnItem = React.memo(function ColumnItem({colDef, searchText}) {\n  const columnName = colDef.field;\n  const dispatch = useDispatch();\n  const isHidden = colDef?.hide === true;\n  const colPref = useSingleColumnPreference(columnName);\n  const isPinned = colDef?.pinned === 'left' || colDef?.pinned === 'right';\n  const [showFloatingIcon, setShowFloatingIcon] = useState(false);\n  const isVisibleInTable = useSelector(state => state.viewing.visibleColumns.includes(columnName));\n\n  if (!colPref) {\n    return <ListItem>{columnName}</ListItem>;\n  }\n\n  const setHighlighted = () => {\n    setJustClickedColumn({dispatch, columnName});\n  }\n  const nameAndControls = (<>\n      <RenderTypeIcon columnName={columnName} renderType={colPref?.renderType} cellDataType={colDef?.cellDataType}/>\n        <ListItemButton\n          sx={{padding: 0, margin: 0, flex: 1}}\n          onClick={setHighlighted}\n          >\n            <ListItemText className=\"select-none\" sx={{\n              overflow: 'hidden', flex: 1, paddingLeft: 0.5, textDecoration: isHidden ? 'line-through' : 'none',\n              color: isVisibleInTable ? 'primary.light' : 'text.secondary',\n            }}>\n              {highlightMatch(columnName, searchText)}\n            </ListItemText>\n        </ListItemButton>\n        <FloatingRightContainer>\n          {(showFloatingIcon) && <ColumnHideIcon columnName={columnName} hide={colDef?.hide} />}\n          {(showFloatingIcon || isPinned) && <ToggleColumnPinIcon columnName={columnName} pinned={colDef?.pinned} hide={colDef?.hide} />}\n        </FloatingRightContainer>\n  </>);\n\n  return (\n\n    <ListItem\n      sx={{padding: 0, width: '100%', display: 'flex', flexDirection: 'row' }}\n      onMouseEnter={() => setShowFloatingIcon(true)}\n      onMouseLeave={() => setShowFloatingIcon(false)}\n    >\n      {nameAndControls}\n    </ListItem>\n\n  );\n});\n\n\n","import { useRef, useEffect } from 'react'\nimport { useDrag, useDrop } from 'react-dnd'\nimport { getEmptyImage } from 'react-dnd-html5-backend'\nimport { ColumnItem } from './ColumnItem'\nconst ItemType = 'item';\n\n\n\n\nexport const ItemContainer = ({ id, item, index, moveItem, onDrop }) => {\n    const ref = useRef(null)\n    const [{ handlerId }, drop] = useDrop({\n        accept: ItemType,\n        collect(monitor) {\n            return {\n                handlerId: monitor.getHandlerId(),\n            }\n        },\n        hover(item, monitor) {\n            if (!ref.current) {\n                return\n            }\n            const dragIndex = item.index\n            const hoverIndex = index\n            // Don't replace items with themselves\n            if (dragIndex === hoverIndex) {\n                return\n            }\n            // Determine rectangle on screen\n            const hoverBoundingRect = ref.current?.getBoundingClientRect()\n            // Get vertical middle\n            const hoverMiddleY =\n            (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n            // Determine mouse position\n            const clientOffset = monitor.getClientOffset()\n            // Get pixels to the top\n            const hoverClientY = clientOffset.y - hoverBoundingRect.top\n            // Only perform the move when the mouse has crossed half of the items height\n            // When dragging downwards, only move when the cursor is below 50%\n            // When dragging upwards, only move when the cursor is above 50%\n            // Dragging downwards\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n                return\n            }\n            // Dragging upwards\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n                return\n            }\n            // Time to actually perform the action\n            moveItem(dragIndex, hoverIndex)\n            // Note: we're mutating the monitor item here!\n            // Generally it's better to avoid mutations,\n            // but it's good here for the sake of performance\n            // to avoid expensive index searches.\n            item.index = hoverIndex\n        },\n        drop(item, monitor) {\n            onDrop(item.id);\n        }\n    })\n    const [{ isDragging }, drag, preview] = useDrag({\n        type: ItemType,\n        item: () => {\n            return { id, index };\n        },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging(),\n        }),\n    })\n    useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true });\n      }, [preview]);\n\n    const opacity = isDragging ? 0.3 : 1\n    drag(drop(ref))\n    return (\n        <div ref={ref} style={{opacity}} data-handler-id={handlerId}>\n            <ColumnItem colDef={item.colDef} searchText={item.searchText}/>\n        </div>\n    )\n}\n","import { useDragLayer } from 'react-dnd';\nimport { Box, Typography } from '@mui/material';\nimport SwapVertOutlinedIcon from '@mui/icons-material/SwapVertOutlined';\n\nconst layerStyles = {\n  position: 'fixed',\n  pointerEvents: 'none',\n  zIndex: 1300,\n  left: 0,\n  top: 0,\n};\n\nfunction getItemStyles(initialOffset, currentOffset) {\n  if (!initialOffset || !currentOffset) {\n    return { display: 'none' };\n  }\n\n  const { x, y } = currentOffset;\n  return {\n    transform: `translate(${x}px, ${y}px)`,\n    WebkitTransform: `translate(${x}px, ${y}px)`,\n  };\n}\n\nexport const CustomDragLayer = () => {\n  const {\n    item,\n    itemType,\n    isDragging,\n    initialOffset,\n    currentOffset,\n  } = useDragLayer((monitor) => ({\n    item: monitor.getItem(),\n    itemType: monitor.getItemType(),\n    isDragging: monitor.isDragging(),\n    initialOffset: monitor.getInitialSourceClientOffset(),\n    currentOffset: monitor.getSourceClientOffset(),\n  }));\n\n  if (!isDragging) {\n    return null;\n  }\n\n  return (\n    <div style={layerStyles}>\n      <div style={getItemStyles(initialOffset, currentOffset)}>\n        <Box sx={{\n          padding: 0.5,\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          gap: 1,\n          backgroundColor: 'background.paper',\n          borderRadius: 1,\n          boxShadow: 3,\n          }}>\n          <SwapVertOutlinedIcon />\n          <Typography >{item.id}</Typography>\n        </Box>\n      </div>\n    </div>\n  );\n};\n\n","import { useRef, useState, useCallback, useEffect } from 'react'\n\nimport update from 'immutability-helper'\nimport { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport { List } from '@mui/material';\nimport { ItemContainer } from './ItemContainer';\nimport { CustomDragLayer } from './CustomDragLayer';\n\n\nexport const ListContainer = ({initialItems, onDropComplete}) => {\n    const [items, setItems] = useState(initialItems);\n    const itemsRef = useRef(items);\n\n    useEffect(() => {\n        setItems(initialItems);\n    }, [initialItems]);\n\n    useEffect(() => {\n        itemsRef.current = items;\n    }, [items]);\n\n    const moveItem = useCallback((dragIndex, hoverIndex) => {\n        setItems((prevItems) =>\n            update(prevItems, {\n            $splice: [\n                [dragIndex, 1],\n                [hoverIndex, 0, prevItems[dragIndex]],\n            ],\n            }),\n        )\n    }, []);\n\n    const handleDrop = useCallback((droppedItem) => {\n        onDropComplete(droppedItem, itemsRef.current);\n    }, [onDropComplete]);\n\n    const renderItem = useCallback((item, index) => {\n        return (\n            <ItemContainer\n            key={item.id}\n            index={index}\n            id={item.id}\n            item={item}\n            moveItem={moveItem}\n            onDrop={handleDrop}\n            />\n        )\n    }, [handleDrop, moveItem]);\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <CustomDragLayer />\n            <List sx={{minHeight: 100, border: '1px solid', borderColor: 'borderColor', borderRadius: 1, padding: 1, overflow: 'auto'}}>\n                {items.map((item, i) => renderItem(item, i))}\n            </List>\n        </DndProvider>\n    )\n}\n\n","import React from 'react';\nimport { Box, Typography } from '@mui/material';\nimport _ from 'lodash';\nimport { toFullUrl } from '@/store/derivedColumnsSlice';\nimport NextLink from 'next/link';\n\nconst UrlSegment = ({color, children, sx={}}) => (\n    <Typography\n      variant=\"body2\"\n      sx={{color, flex: 0, fontFamily: 'monospace', ...sx}}\n    >\n        {children}\n    </Typography>\n);\n\nconst UrlSeparator = ({children}) => (\n    <UrlSegment color=\"warning.light\" sx={{fontWeight: 'bold'}}>\n        {children}\n    </UrlSegment>\n);\n\nconst ParamKey = ({children}) => (\n    <UrlSegment color=\"success.main\">\n        {children}\n    </UrlSegment>\n);\n\nconst ParamValue = ({children}) => (\n    <UrlSegment\n      color=\"primary.light\"\n      sx={{\n        maxWidth: '200px',\n        minWidth: '10px',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        flex: 1,\n    }}>\n        {children}\n    </UrlSegment>\n);\n\n\n\n\n\nexport const RainbowUrl = React.memo(function RainbowUrl({ baseUrl, params }) {\n\n    const fullUrl = toFullUrl({baseUrl, params});\n\n    return (\n        <NextLink href={fullUrl} target=\"_blank\">\n            <Box sx={{\n                display: 'flex',\n                flexDirection: 'row',\n                gap: 0,\n                alignItems: 'flex-start',\n                width: '100%',\n                flexWrap: 'wrap',\n            }}>\n                <UrlSegment color=\"text.primary\">\n                    {baseUrl}\n                </UrlSegment>\n                <UrlSeparator>\n                    ?\n                </UrlSeparator>\n                {Object.keys(params).map((key, i) => (\n                    <Box key={i} sx={{display: 'flex', flexDirection: 'row', gap: 0, alignItems: 'center'}}>\n                        {i > 0 && <UrlSeparator>{'&'}</UrlSeparator>}\n                        <ParamKey>{key}</ParamKey>\n                        <UrlSeparator>{'='}</UrlSeparator>\n                        <ParamValue>{params[key]}</ParamValue>\n\n                    </Box>\n                ))}\n\n            </Box>\n        </NextLink>\n    )\n});\n","import React from 'react';\nimport { useState } from 'react';\nimport _ from 'lodash';\nimport { useEffect } from 'react';\nimport { RainbowUrl } from '@/components/elements/RainbowUrl';\nimport { toFullUrl } from '@/store/derivedColumnsSlice';\nimport { CircularProgress } from '@mui/material';\nimport { IFrameVisualizationCell } from '@/components/table/rightClickMenu/IFrameVisualizationCell';\nimport { Box } from '@mui/material';\nimport useSetting from '@/hooks/useSetting';\nimport { evaluateDictExpressions } from '@/store/derivedColumnsSlice';\n\n\n\nexport const ParamsURL = React.memo(function ParamsURL({ baseUrl, params, singleRowData }) {\n    const { value: size } = useSetting('tableMaxRowHeight');\n    const [evaluatedParams, setEvaluatedParams] = useState({});\n    const [fullUrl, setFullUrl] = useState('');\n\n    useEffect(() => {\n        const evaluateData = async () => {\n            const results = await evaluateDictExpressions({params, singleRowData});\n            setEvaluatedParams(results);\n            setFullUrl(toFullUrl({baseUrl, params: results}));\n        };\n        evaluateData();\n    }, [params, singleRowData, baseUrl]);\n\n    if (_.isEmpty(evaluatedParams)) {\n        return <CircularProgress size={20} />;\n    }\n\n    return (\n        <Box sx={{display: 'flex', flexDirection: 'row', gap: 1, width: '100%', height: size, alignItems: 'center'}}>\n            <Box sx={{flex: 0, width: size, height: size}}>\n                {false && <IFrameVisualizationCell value={fullUrl} /> }\n                {/* TODO; somehow the page would freeze when the iframe is rendered */}\n            </Box>\n            <Box sx={{maxHeight: size, flex: 1, height: '100%'}}>\n                <RainbowUrl baseUrl={baseUrl} params={evaluatedParams} />\n            </Box>\n\n        </Box>\n    )\n});\n","import React from 'react';\nimport { Box, CircularProgress } from '@mui/material';\nimport { MyDropdown, MyTextField } from '../elements/Controls';\nimport { useDispatch } from 'react-redux';\nimport { RENDER_TYPES } from '@/constants';\nimport { useState } from 'react';\nimport { useRowData } from '@/hooks/useApiData';\nimport { isMissing } from '@/utils/helpers';\nimport { ParamsURL } from '@/components/derivedColumns/ParamsURL';\nimport { MyButton, MyIconButton } from '@/components/elements/Controls';\nimport { SectionHeader, TextWithAddon } from '@/components/elements/displays';\nimport AddOutlinedIcon from '@mui/icons-material/AddOutlined';\nimport _ from 'lodash';\nimport ClearOutlinedIcon from '@mui/icons-material/ClearOutlined';\nimport UndoOutlinedIcon from '@mui/icons-material/UndoOutlined';\nimport VisibilityOutlinedIcon from '@mui/icons-material/VisibilityOutlined';\nimport CheckOutlinedIcon from '@mui/icons-material/CheckOutlined';\nimport HelpOutlineOutlinedIcon from '@mui/icons-material/HelpOutlineOutlined';\nimport NextLink from 'next/link';\n\n\nconst ColumnPreview = React.memo(function ColumnPreview({ column }) {\n    const {data: rowData} = useRowData();\n    if (isMissing(rowData)) {\n        return <CircularProgress />;\n    }\n\n    return (\n        <Box sx={{display: 'flex', flexDirection: 'column', gap: 3 }}>\n            <SectionHeader title=\"Preview\" />\n            {rowData.slice(0, 3).map((r, i) => (\n                <ParamsURL key={i} baseUrl={column.baseUrl} params={column.params} singleRowData={r} />\n            ))}\n        </Box>\n    );\n});\n\nconst DerivedColumnEdit = React.memo(function DerivedColumnEdit({ column }) {\n    const dispatch = useDispatch();\n\n    const [renderType, setRenderType] = useState(column.renderType);\n    const [columnBuffer, setColumnBuffer] = useState(column);\n    const [name, setName] = useState(column.name);\n    const [baseUrl, setBaseUrl] = useState(column.baseUrl);\n    const [params, setParams] = useState(_.toPairs(column.params).map(([key, value]) => ({key, value})));\n\n\n\n    const setParamKey = (i, key) => {\n        const newParams = [...params];\n        newParams[i].key = key;\n        setParams(newParams);\n    }\n    const setParamValue = (i, value) => {\n        const newParams = [...params];\n        newParams[i].value = value;\n        setParams(newParams);\n    }\n    const deleteParam = (i) => {\n        const newParams = [...params];\n        newParams.splice(i, 1);\n        setParams(newParams);\n    }\n    const addParam = () => {\n        setParams([...params, {key: 'key', value: '\"value\"'}]);\n    }\n\n    const getNewColumn = () => {\n        return {\n            name, baseUrl, renderType, params: _.fromPairs(params.map(({key, value}) => [key, value]))\n        }\n    }\n    const handlePreview = () => {\n        const newColumn = getNewColumn();\n        setColumnBuffer(newColumn);\n    }\n    const handleSave = () => {\n        const newColumn = getNewColumn();\n        dispatch(updateDerivedColumn(newColumn));\n    }\n    const handleUndo = () => {\n        setColumnBuffer(column);\n        setName(column.name);\n        setBaseUrl(column.baseUrl);\n        setRenderType(column.renderType);\n        setParams(_.toPairs(column.params).map(([key, value]) => ({key, value})));\n    }\n\n    const supportedRenderTypes = [\n        RENDER_TYPES.IFRAME,\n        RENDER_TYPES.LINK,\n    ]\n\n    return (\n\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, my: 1, p: 1 }}>\n                <Box sx={{display: 'flex', flexDirection: 'row', gap: 1, alignItems: 'center'}}>\n                    <MyDropdown\n                        label=\"Render Type\"\n                        value={renderType}\n                        options={supportedRenderTypes}\n                        onValueChange={setRenderType}\n                        width=\"200px\"\n                    />\n                    <MyTextField\n                        label=\"Base URL\"\n                        value={baseUrl}\n                        monospace={true}\n                        onValueChange={setBaseUrl}\n                        color='text.primary'\n                    />\n\n                </Box>\n                <SectionHeader title=\"URL Parameters\" />\n\n                {params.map(({key, value}, i) => (\n                    <Box key={i} sx={{display: 'flex', flexDirection: 'row', gap: 1, alignItems: 'center'}}>\n                        <MyTextField\n                            label={'key'} value={key} monospace={true} sx={{maxWidth: '150px'}}\n                            onValueChange={(key) => setParamKey(i, key)}\n                            color='success.main'\n                        />\n                        <MyTextField\n                            label={(\n                              <TextWithAddon\n                                addon={\n                                  <NextLink href=\"https://docs.jsonata.org/overview.html\" target=\"_blank\">\n                                    <HelpOutlineOutlinedIcon />\n                                  </NextLink>\n                                }\n                                text=\"Value using JSONATA expression\"\n                             />)}\n                            value={value} monospace={true} sx={{flex: 1}}\n                            onValueChange={(value) => setParamValue(i, value)}\n                            color='primary.light'\n                        />\n                        <MyIconButton icon={<ClearOutlinedIcon />} onClick={() => deleteParam(i)} />\n                    </Box>\n                ))}\n\n                <Box sx={{display: 'flex', flexDirection: 'row', gap: 1, alignItems: 'center'}}>\n                    <MyButton onClick={addParam} variant='outlined' startIcon={<AddOutlinedIcon />}>\n                        Add\n                    </MyButton>\n                    <MyButton onClick={handleUndo} variant='outlined' color='warning' startIcon={<UndoOutlinedIcon />}>\n                        Undo\n                    </MyButton>\n                    <Box sx={{flex: 1}} />\n                    <MyButton onClick={handlePreview} variant='outlined' startIcon={<VisibilityOutlinedIcon />}>\n                        Preview\n                    </MyButton>\n                    <MyButton onClick={handleSave} startIcon={<CheckOutlinedIcon />}>\n                        Save\n                    </MyButton>\n                </Box>\n\n\n\n                <ColumnPreview column={columnBuffer} />\n            </Box>\n\n    );\n});\n\nexport default DerivedColumnEdit;","import React from 'react';\nimport { SX_TEXT_HOVER } from '@/utils/styles';\nimport { Box, Typography } from '@mui/material';\nimport { ICONS_FOR_RENDER_TYPE } from '@/configs/iconsForRenderType';\nimport ClickCard from '@/components/elements/ClickCard';\nimport DerivedColumnEdit from '@/components/derivedColumns/DerivedColumnEdit';\n\n\nconst DerivedColumnItem = React.memo(function DerivedColumnItem({ column }) {\n\n\n    const trigger = (\n        <Box sx={{ display: 'flex', flexDirection: 'row', gap: 1, ...SX_TEXT_HOVER }}>\n\n            {ICONS_FOR_RENDER_TYPE[column.renderType]}\n\n            <Typography variant=\"body1\">{column.name}</Typography>\n        </Box>\n    );\n\n    return (\n        <ClickCard\n            trigger={trigger}\n            title={column.name}\n            anchorHorizontal=\"right\"\n            anchorVertical=\"top\"\n            transformOriginHorizontal=\"left\"\n            transformOriginVertical=\"top\"\n            width={500}\n            height={400}\n        >\n\n            <DerivedColumnEdit column={column} />\n\n        </ClickCard>\n    );\n});\n\nexport default DerivedColumnItem;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { SX_BORDER } from '@/utils/styles';\nimport { Box, Typography } from '@mui/material';\nimport DerivedColumnItem from '@/components/derivedColumns/DerivedColumnItem';\n\n\nconst DerivedColumns = React.memo(function DerivedColumns() {\n  const derivedColumns = useSelector(state => state.derivedColumns);\n  if (derivedColumns.length === 0) {\n    return null;\n  }\n  return (\n    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1, p: 1, ...SX_BORDER }}>\n        <Typography variant=\"h6\">Derived Columns</Typography>\n        {derivedColumns.map(column => (\n            <DerivedColumnItem key={column.name} column={column} />\n        ))}\n    </Box>\n  );\n});\nDerivedColumns.displayName = 'DerivedColumns';\n\nexport default DerivedColumns;","import { useDispatch } from 'react-redux';\nimport { Paper, Box } from '@mui/material';\nimport { useEffect } from 'react';\nimport { useColumnDefs } from '@/hooks/useColumnDefs';\nimport { MyTextField } from '@/components/elements/Controls';\nimport { useState } from 'react';\nimport { ListContainer } from './ListContainer';\nimport { setColumnDefs } from '@/store/agColDefsSlice';\nimport React from 'react';\nimport SqlCard from '@/components/elements/SqlCard';\nimport { SpinningPlaceHolder } from '@/components/elements/PlaceHolder';\nimport DerivedColumns from '@/components/derivedColumns/DerivedColumns';\n\nconst ColumnNavigation = React.memo(function ColumnNavigation({ }) {\n  const dispatch = useDispatch();\n  const [searchText, setSearchText] = useState('');\n  const {columnDefs, loading, error} = useColumnDefs();\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    const itemsData = columnDefs.map(d => ({\n      id: d.field,\n      colDef: d,\n      searchText,\n    }));\n    setItems(itemsData);\n\n  }, [columnDefs, searchText]);\n  if (loading) {\n    return <SpinningPlaceHolder />;\n  }\n  if (items.length === 0) {\n    return null;\n  }\n  const onDropComplete = (droppedId, allItems) => {\n    const newColumnDefs = allItems.map(d => d.colDef);\n    dispatch(setColumnDefs(newColumnDefs));\n  }\n\n  return (\n    <Paper sx={{ height: '100%', flex: 1, display: 'flex', flexDirection: 'column', gap: 1, padding: 1 }}>\n\n\n      <Box sx={{display: 'flex', flexDirection: 'row', gap: 1, alignItems: 'center'}}>\n        <Box sx={{flex: 1}}>\n          <MyTextField label=\"Search column name\" value={searchText} onValueChange={setSearchText} />\n        </Box>\n\n        <Box sx={{flex: 0}}>\n          <SqlCard sqlKey=\"columnMeta\" />\n        </Box>\n\n      </Box>\n      <ListContainer\n        initialItems={items}\n        onDropComplete={onDropComplete} />\n\n      <DerivedColumns />\n    </Paper>\n  );\n});\n\nexport default ColumnNavigation;","import React from 'react';\nimport useSetting from '@/hooks/useSetting';\nimport { SX_BORDER } from '@/utils/styles';\nimport { Box } from '@mui/material';\n\n\n\nexport const IFrameVisualizationInGallery = React.memo(function IFrameVisualizationInGallery({value}) {\n\n    const { value: galleryItemSize } = useSetting('galleryItemSize');\n    const url = value;\n    if (!url) return String(value);\n\n    return (\n        <Box sx={{...SX_BORDER, width: galleryItemSize + 2, height: galleryItemSize + 2}}>\n            <iframe style={{width: galleryItemSize, height: galleryItemSize}} src={url + `&size=${galleryItemSize}`}></iframe>\n        </Box>\n    )\n});","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Box, Typography } from '@mui/material';\nimport { setJustClickedRow } from '@/store/viewingSlice';\nimport { isMissing } from '@/utils/helpers';\nimport useMUITheme from '@/hooks/useMUITheme';\nimport { useSingleColumnPreference } from '@/hooks/useColumnPreference';\nimport { JsonBox } from '@/components/elements/JsonBox';\nimport { RENDER_TYPES } from '@/constants';\nimport { ImageBox } from '@/components/elements/ImageBox';\nimport { IFrameVisualizationInGallery } from '@/components/elements/IFrameVisualization';\n\nconst GalleryItem = React.memo(function GalleryItem({row, index}) {\n\n  const dispatch = useDispatch();\n  const galleryItemSize = useSelector((state) => state.settings.galleryItemSize) || 128;\n  const galleryVisualColumn = useSelector((state) => state.settings.galleryVisualColumn);\n  const galleryCaptionColumn = useSelector((state) => state.settings.galleryCaptionColumn);\n  const justClickedRow = useSelector((state) => state.viewing.justClickedRow);\n  const muiTheme = useMUITheme();\n  const colPref = useSingleColumnPreference(galleryVisualColumn);\n\n  const handleClick = () => {\n    dispatch(setJustClickedRow(index));\n  }\n\n  const caption = row[galleryCaptionColumn];\n  const value = row[galleryVisualColumn];\n\n  const makeVisual = () => {\n    if (isMissing(galleryVisualColumn)) {\n      return null;\n    } else {\n      const renderType = colPref.renderType;\n      switch (renderType) {\n        case RENDER_TYPES.IFRAME:\n          return (\n\n              <IFrameVisualizationInGallery value={value} />\n\n          );\n        case RENDER_TYPES.IMAGE_URL:\n        return (\n          <ImageBox url={value} size={galleryItemSize} cropSquare={true} />\n\n        );\n        case RENDER_TYPES.JSON:\n          return (\n            <Box sx={{width: galleryItemSize, height: galleryItemSize, overflow: 'auto'}}>\n              <JsonBox obj={value} />\n            </Box>\n          );\n        case RENDER_TYPES.TEXT:\n          return (\n            <Box sx={{width: galleryItemSize, height: galleryItemSize, overflow: 'auto', padding: 0.5}}>\n              <Typography variant=\"body2\">\n                {isMissing(value) ? '-' : String(value)}\n              </Typography>\n            </Box>\n          );\n          default:\n            return null;\n      }\n\n    }\n  }\n\n  return (\n  <Box sx={{\n    width: galleryItemSize + 2, padding: 0,\n    float: 'left',\n    margin: 0.5,\n    border: '1px solid',\n    borderColor: muiTheme.palette.divider,\n    bgcolor: justClickedRow === index ? 'highlight.light' : 'background.card',\n    color: justClickedRow === index ? 'highlight.contrastText' : 'text.primary',\n    cursor: 'pointer',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'left',\n    justifyContent: 'center', gap: 1,\n  }} onClick={handleClick}>\n        {makeVisual()}\n        <Typography variant=\"body2\" className=\"truncate\" sx={{padding: 0.5}}>\n          {isMissing(caption) ? '-' : String(caption)}\n        </Typography>\n\n  </Box>\n  );\n});\n\n\nexport default GalleryItem;","import { MyTypeaheadDropdown } from '@/components/elements/Controls';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { updateSettings } from '@/store/settingsSlice';\nimport React from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { WarningCard } from '@/components/elements/ClickCard';\nimport { MiniParagraph } from '@/components/elements/displays';\nimport ColumnStatsCell from '@/components/table/ColumnStats/ColumnStatsCell';\nimport { RowBoxes } from '@/components/elements/containers';\nimport { useCallback } from 'react';\nimport _ from 'lodash';\nimport { useAllColumnsMeta } from '@/hooks/useApiData';\nimport { useAllRenderTypes } from '@/hooks/useColumnPreference';\nimport { RENDER_TYPES } from '@/constants';\n\nexport const WarningBox = React.memo(function WarningBox({settingKey, content}) {\n\n    return (\n        <Box sx={{\n            display: 'flex', flexDirection: 'row', gap: 1, alignItems: 'center',\n            border: '1px solid', borderColor: 'borderColor', padding: 1, borderRadius: 1,\n            }}>\n            <Box>\n                <WarningCard title={`${settingKey} missing`} >\n                   {content}\n                </WarningCard>\n            </Box>\n\n            <Typography variant=\"body2\">{settingKey}</Typography>\n        </Box>\n\n    );\n\n});\n\nexport const NumericColumnSelector = ({meta, renderType}) => {\n    return meta.isNumeric && (!meta.allNull && !meta.singleValue) && renderType === RENDER_TYPES.NUMBER;\n};\n\nexport const CategoryColumnSelector = ({meta, renderType}) => {\n    return renderType === RENDER_TYPES.CATEGORY;\n};\n\nconst SelectColumnInSettings = React.memo(({\n    settingKey, label, onValueChange = null,\n    promptIfNoCandidates = [], showStats = 'none', multiple = false,\n    columnSelector, allowEmpty = false,\n    extraCandidates = []\n}) => {\n    const dispatch = useDispatch();\n\n\n    const value = useSelector((state) => state.settings[settingKey]) || (multiple ? [] : '');\n    const {data: allColumnsMeta} = useAllColumnsMeta() || {};\n    const allRenderTypes = useAllRenderTypes();\n    const { initialOrder, meta} = allColumnsMeta || {};\n\n\n\n    const candidates = (initialOrder || []).filter(colName => columnSelector({\n        meta: meta[colName] || {}, renderType: allRenderTypes[colName] || ''\n    })).concat(extraCandidates);\n\n\n    const missingValue = multiple ? value.length === 0 : value === '';\n    const setValue = useCallback((newValue) => {\n        dispatch(updateSettings({[settingKey]: newValue}));\n        if (onValueChange) {\n            onValueChange(newValue);\n        }\n    }, [dispatch, onValueChange, settingKey]);\n\n    useEffect(() => {\n        if (multiple && !allowEmpty) {\n            if (missingValue && candidates.length > 0) {\n                setValue([candidates[0]]);\n            }\n        } else {\n            if (missingValue && candidates.length > 0 && !allowEmpty) {\n                setValue(candidates[0]);\n            }\n        }\n    }, [candidates, setValue, multiple, missingValue, allowEmpty]);\n\n    if (candidates.length === 0 && !allowEmpty) {\n        const warningContent = (\n            <>\n            <MiniParagraph text={`There is no column candidate`} />\n            {promptIfNoCandidates.map((text, index) => (\n                <MiniParagraph key={index} text={text} />\n            ))}\n            </>\n        );\n        return <WarningBox settingKey={settingKey} content={warningContent} />;\n    }\n\n    const dropdown = (\n        <MyTypeaheadDropdown\n            options={allowEmpty ? ['', ...candidates] : candidates}\n            value={value}\n            onChange={setValue}\n            label={label}\n            multiple={multiple}\n        />\n    );\n    const stats = (value && <ColumnStatsCell name={value}/>);\n\n    if (showStats === 'left') {\n        return <RowBoxes>{stats}{dropdown}</RowBoxes>\n    } else if (showStats === 'right') {\n        return <RowBoxes>{dropdown} {stats}</RowBoxes>\n    } else {\n        return dropdown;\n    }\n});\n\nSelectColumnInSettings.displayName = 'SelectColumnInSettings';\n\nexport default SelectColumnInSettings;\n\nexport const GalleryVisualColumn = () => {\n    const derivedColumns = useSelector(state => state.derivedColumns);\n    const extraCandidates = _.map(derivedColumns, (col) => col.name);\n    return (\n\n    <SelectColumnInSettings\n        settingKey=\"galleryVisualColumn\"\n        label=\"Which column to display as the main visual in gallery?\"\n        columnSelector={({meta, renderType}) => {\n            return (!meta.allNull && !meta.singleValue) && [\n                RENDER_TYPES.IMAGE_URL, RENDER_TYPES.VIDEO_URL, RENDER_TYPES.JSON, RENDER_TYPES.TEXT\n            ].includes(renderType);\n        }}\n        extraCandidates={extraCandidates}\n    />\n)};\n\nexport const GalleryCaptionColumn = () => (\n    <SelectColumnInSettings\n        settingKey=\"galleryCaptionColumn\"\n        label=\"Which column to show as item caption in gallery?\"\n        columnSelector={({meta, renderType}) => {\n            return (!meta.allNull && !meta.singleValue) && [\n                RENDER_TYPES.CATEGORY, RENDER_TYPES.TEXT, RENDER_TYPES.NUMBER\n            ].includes(renderType);\n        }}\n    />\n);\n\n","import React from 'react';\nimport { Box } from '@mui/material';\nimport { GalleryCaptionColumn, GalleryVisualColumn } from '@/components/elements/SelectColumnInSettings';\nimport PanelControlsWrapper from '@/components/elements/PanelControlsWrapper';\nimport RandomSampling from '@/components/table/RandomSampling';\nimport SliderInSettings from '@/components/settings/SliderInSettings';\n\nexport const GalleryControls = React.memo(() => {\n    return (\n        <PanelControlsWrapper>\n            <RandomSampling />\n            <Box sx={{flex: 1}}>\n                <GalleryVisualColumn />\n            </Box>\n            <Box sx={{flex: 1}}>\n                <GalleryCaptionColumn />\n            </Box>\n            <Box sx={{flex: 1}}>\n                <SliderInSettings settingKey=\"galleryItemSize\"/>\n\n            </Box>\n        </PanelControlsWrapper>\n    );\n});\n\nGalleryControls.displayName = 'GalleryControls';\n\nexport default GalleryControls;","import { useSelector } from 'react-redux';\nimport { Box, Paper } from '@mui/material';\nimport GalleryItem from './GalleryItem';\nimport React from 'react';\nimport { GalleryControls } from './GalleryControls';\n\nconst Gallery = React.memo(function Gallery() {\n\n  const rowData = useSelector((state) => state.rowData.data) || [];\n\n  return (\n    <Paper sx={{\n      display: 'flex', flexDirection: 'column',  backgroundColor: 'background.paper',\n      height: '100%', width: '100%'\n    }}>\n      <Box sx={{flex: 0}}>\n        <GalleryControls />\n      </Box>\n\n      <Box sx={{display: 'block', flex: 1, overflow: 'auto', padding: 1}}>\n\n        {rowData.map((row, index) => (\n          <GalleryItem key={`${index}`} row={row} index={index} />\n        ))}\n      </Box>\n\n    </Paper>\n  );\n});\n\n\nexport default Gallery;\n","import { useSelector } from 'react-redux';\nimport { Box, Typography, List, ListItem, ListItemText } from '@mui/material';\nimport { JsonBox } from '@/components/elements/JsonBox';\nimport { isMissing } from '@/utils/helpers';\nimport { IFrameVisualizationInGallery } from '@/components/elements/IFrameVisualization';\nimport { createSelector } from 'reselect';\nimport _ from 'lodash';\nimport { ImageBox } from '@/components/elements/ImageBox';\n\nconst RowDetails = () => {\n  const columnDefs = useSelector((state) => state.agColDefs.columnDefs);\n  const columnPreference = useSelector((state) => state.columnPreference.data);\n\n  const selectedRow = useSelector(createSelector(\n    [\n      (state) => state.viewing,\n      (state) => state.rowData.data\n    ],\n    (viewing, rowData) => {\n      if (isMissing(viewing.justClickedRow) || isMissing(rowData)) {\n        return null;\n      } else {\n        return rowData[viewing.justClickedRow];\n      }\n    }\n  ));\n\n  if (!selectedRow) {\n    return <Box sx={{p: 2, backgroundColor: 'background.paper'}} className=\"full-size\">\n        <Typography variant=\"h6\">Click on a row in table to view details.</Typography>\n    </Box>;\n  }\n\n  const displayedValue = (field) => {\n    const value = _.get(selectedRow, field);\n\n    if (isMissing(value)) {\n      return String(value);\n    }\n    const renderType = columnPreference[field]?.renderType;\n    switch (renderType) {\n      case 'ImageUrl':\n        return <ImageBox url={value} showUrl={true}/>;\n      case 'JSON':\n        return <Box sx={{width: '100%', maxHeight: '500px', overflow: 'auto'}}><JsonBox obj={value} /></Box>;\n      case 'IFrameVisualization':\n        return <IFrameVisualizationInGallery value={value} />;\n      default:\n        return <Typography component=\"div\">{String(value)}</Typography>;\n    }\n  }\n\n  return (\n    <Box sx={{ backgroundColor: 'background.paper' }}>\n      <List>\n        {columnDefs.map((colDef) => {\n          const field = colDef.field;\n          const displayValue = displayedValue(field);\n\n          return (\n            <ListItem key={field}>\n              <ListItemText\n                primary={<Typography component=\"div\" variant=\"h6\">{field}</Typography>}\n                secondary={<Typography component=\"div\" variant=\"body2\" sx={{color: 'text.secondary'}}>{displayValue}</Typography>}\n              />\n            </ListItem>\n          );\n        })}\n      </List>\n    </Box>\n  );\n};\n\nexport default RowDetails;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setDataFile } from '@/store/dataFileSlice';\nimport { useSearchParams } from 'next/navigation';\nimport path from 'path';\nimport { updateSettings } from '@/store/settingsSlice';\nimport { pathDirname } from '@/store/folderBrowserSlice';\n\nconst useDataFile = () => {\n  const dispatch = useDispatch();\n  const {filePath, fileFormat} = useSelector(state => state.dataFile);\n  const searchParams = useSearchParams();\n  const userRequestedFilePath = searchParams.get('filePath');\n  const userRequestedFileFormat = searchParams.get('fileFormat');\n\n  const rootFolder = useSelector(state => state.settings.folderBrowserRootFolder);\n\n\n  useEffect(() => {\n    if (userRequestedFilePath) {\n        const format = userRequestedFileFormat || path.extname(userRequestedFilePath).slice(1);\n        dispatch(setDataFile({filePath: userRequestedFilePath, fileFormat: format}));\n        if (!rootFolder) {\n            dispatch(updateSettings({folderBrowserRootFolder: pathDirname(userRequestedFilePath)}));\n        }\n    } else if (!filePath) {\n        throw new Error('No file path provided');\n    }\n  }, [dispatch, filePath, rootFolder, fileFormat, userRequestedFilePath, userRequestedFileFormat]);\n\n  return { filePath, fileFormat };\n};\n\nexport default useDataFile;","import React, { useState, useRef, useEffect } from 'react';\nimport Box from '@mui/material/Box';\n\nexport default function VerticalSplitBox({top, bottom, initTopHeight='50%'}) {\n  const [topHeight, setTopHeight] = useState(initTopHeight);\n  const [containerHeight, setContainerHeight] = useState(0);\n  const containerRef = useRef(null);\n\n  // Track container height for percentage calculations\n  useEffect(() => {\n    const updateContainerHeight = () => {\n      if (containerRef.current) {\n        setContainerHeight(containerRef.current.clientHeight);\n      }\n    };\n\n    updateContainerHeight();\n\n    const resizeObserver = new ResizeObserver(updateContainerHeight);\n    if (containerRef.current) {\n      resizeObserver.observe(containerRef.current);\n    }\n\n    return () => resizeObserver.disconnect();\n  }, []);\n\n  // Convert percentage to pixels if needed\n  const getPixelHeight = (height) => {\n    if (typeof height === 'string' && height.includes('%')) {\n      const percentage = parseFloat(height) / 100;\n      return containerHeight * percentage;\n    }\n    return parseFloat(height);\n  };\n\n  // Convert pixels back to percentage if original was percentage\n  const updateHeight = (newPixelHeight) => {\n    if (typeof initTopHeight === 'string' && initTopHeight.includes('%')) {\n      const percentage = (newPixelHeight / containerHeight) * 100;\n      setTopHeight(`${Math.max(10, Math.min(90, percentage))}%`); // Clamp between 10% and 90%\n    } else {\n      setTopHeight(Math.max(100, newPixelHeight)); // Min 100px for pixel values\n    }\n  };\n\n  const startDrag = (e) => {\n    const startY = e.clientY;\n    const startPixelHeight = getPixelHeight(topHeight);\n\n    const onMouseMove = (e) => {\n      const delta = e.clientY - startY;\n      const newPixelHeight = startPixelHeight + delta;\n      updateHeight(newPixelHeight);\n    };\n\n    const onMouseUp = () => {\n      document.removeEventListener('mousemove', onMouseMove);\n      document.removeEventListener('mouseup', onMouseUp);\n    };\n\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('mouseup', onMouseUp);\n  };\n\n  const currentPixelHeight = getPixelHeight(topHeight);\n\n  return (\n    <Box\n      ref={containerRef}\n      sx={{\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n      }}\n    >\n      {/* Top Pane */}\n      <Box sx={{\n        height: `${currentPixelHeight}px`,\n        overflow: 'auto',\n      }}>\n        {top}\n      </Box>\n\n      {/* Divider */}\n      <Box\n        onMouseDown={startDrag}\n        sx={{\n          height: '2px',\n          bgcolor: 'divider',\n          cursor: 'row-resize',\n          '&:hover': { bgcolor: 'primary.main' },\n        }}\n      />\n\n      {/* Bottom Pane */}\n      <Box sx={{\n        flex: 1,\n        overflow: 'auto',\n      }}>\n        {bottom}\n      </Box>\n    </Box>\n  );\n}\n","import { Box, Typography } from '@mui/material';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { createSelector } from '@reduxjs/toolkit';\nimport _ from 'lodash';\nimport ColumnStatsCell from '@/components/table/ColumnStats/ColumnStatsCell';\nimport VerticalSplitBox from '@/components/layout/VerticalSplitBox';\nimport { TextPlaceHolder } from '@/components/elements/PlaceHolder';\n\nexport const ColumnFilterList = React.memo(function ColumnFilterList({columnNames, messageIfEmpty}) {\n\n    if (columnNames.length === 0) {\n        return <TextPlaceHolder text={messageIfEmpty} />\n    }\n\n    return (\n        <Box sx={{\n            display: 'flex', flexDirection: 'column', gap: 1, p: 1,\n            overflow: 'auto', backgroundColor: 'background.paper'\n        }}>\n            {columnNames.map(name => (\n                <Box key={name} sx={{\n                    display: 'flex', flexDirection: 'row', alignItems: 'center', gap: 1,\n                }}>\n                    <Box sx={{flex: 1}}>\n                        <Typography variant=\"body1\" className=\"one-line-text\">{name}</Typography>\n                    </Box>\n                    <Box sx={{flex: 1}}>\n                        <ColumnStatsCell name={name} />\n                    </Box>\n\n\n                </Box>\n            ))}\n        </Box>\n    );\n});\n\nexport const ColumnFilters = React.memo(function ColumnFilters() {\n    const {havingFilter, withoutFilter} = useSelector(createSelector([\n        state => state.agColDefs.filters,\n        state => state.columnMeta?.data?.primitiveColumns,\n    ],\n        (filters, primitiveColumns) => ({\n            havingFilter: _.keys(filters || {}),\n            withoutFilter: _.difference(primitiveColumns, _.keys(filters || {}))\n        })\n    ));\n\n    return <VerticalSplitBox\n        top={<ColumnFilterList columnNames={havingFilter} messageIfEmpty=\"No active column filters\" />}\n        bottom={<ColumnFilterList columnNames={withoutFilter} messageIfEmpty=\"No columns without filters\" />}\n    />;\n\n\n});\n\n","import { Box, CircularProgress } from '@mui/material';\nimport SelectColumnInSettings from '@/components/elements/SelectColumnInSettings';\nimport { useDispatch } from 'react-redux';\nimport SqlCard from '@/components/elements/SqlCard';\nimport { boxPlotSlice } from '@/store/boxPlotSlice';\nimport DropdownInSettings from '@/components/settings/DropdownInSettings';\nimport PanelControlsWrapper from '@/components/elements/PanelControlsWrapper';\nimport { useInitSettings } from '@/hooks/useApiData';\nimport { isMissing } from '@/utils/helpers';\nimport { NumericColumnSelector, CategoryColumnSelector } from '@/components/elements/SelectColumnInSettings';\n\nconst BoxPlotControls = () => {\n    const {data: initSettings} = useInitSettings();\n    const dispatch = useDispatch();\n\n    if (isMissing(initSettings)) {\n        return <CircularProgress />;\n    }\n\n\n    const refreshBoxPlotData = () => {\n        dispatch(boxPlotSlice.actions.setShouldRefresh());\n    }\n\n\n\n    return (\n    <PanelControlsWrapper>\n        <Box sx={{flex: 1}}>\n\n            <SelectColumnInSettings\n                settingKey=\"boxPlotBreakdownColumn\"\n                label=\"Breakdown column\"\n                onValueChange={refreshBoxPlotData}\n                showStats=\"left\"\n                allowEmpty={true}\n                columnSelector={CategoryColumnSelector}\n            />\n        </Box>\n\n        <Box sx={{flex: 1}}>\n\n        <SelectColumnInSettings\n                settingKey=\"boxPlotColumns\"\n                label=\"What columns to plot?\"\n                onValueChange={refreshBoxPlotData}\n                multiple={true}\n                showStats=\"none\"\n                columnSelector={NumericColumnSelector}\n            />\n        </Box>\n\n        <Box sx={{flex: 0, minWidth: 100}}>\n            <DropdownInSettings\n                settingKey=\"boxPlotSortBy\"\n                shortLabel=\"Sort by?\"\n            />\n            </Box>\n\n        <SqlCard sqlKey=\"boxPlot\" />\n\n    </PanelControlsWrapper>\n    )\n};\n\nexport default BoxPlotControls;","import React from 'react';\nimport useMUITheme from '@/hooks/useMUITheme';\nimport { useSelector } from 'react-redux';\nimport { isMissing } from '@/utils/helpers';\nimport { Typography } from '@mui/material';\nimport { coalesce } from '@/utils/helpers';\nimport ClickCard from '@/components/elements/ClickCard';\nimport { JsonBox } from '@/components/elements/JsonBox';\n\n\nexport const HorizontalBoxPlot = React.memo(function HorizontalBoxPlot({\n    data,\n    width = 200,\n    strokeWidth=2,\n  }) {\n    const muiTheme = useMUITheme();\n\n    const heightOfColumnDistribution = useSelector(state => state.settings.heightOfColumnDistribution);\n\n    if (!data || isMissing(data.avg)) {\n      return null;\n    }\n\n    const plotHeight = 16;\n    const centerY = heightOfColumnDistribution / 2;\n    const plotY1 = centerY - plotHeight / 2;\n    const plotY2 = centerY + plotHeight / 2;\n    const { min, q25, q50, q75, max, avg } = data;\n    const globalMin = coalesce(data.globalMin, min);\n    const globalMax = coalesce(data.globalMax, max);\n\n    const padding = 4;\n    const mapped = (value) => padding + (value - globalMin) * (width - 2 * padding) / (globalMax - globalMin);\n\n    const VerticalLine = ({x}) => {\n      return (\n        <line x1={x} x2={x} y1={plotY1} y2={plotY2}\n        stroke={muiTheme.palette.text.primary} strokeWidth={strokeWidth}/>\n      )\n    }\n\n    if (globalMin === globalMax) {\n      return <Typography variant=\"body2\">Single value: {globalMin}</Typography>;\n    } else {\n      const drawing = (\n          <svg width={width} height={heightOfColumnDistribution} style={{\n              backgroundColor: muiTheme.palette.background.card,\n          }}>\n              <line // Center line\n              x1={mapped(min)} x2={mapped(max)} y1={centerY} y2={centerY}\n              stroke={muiTheme.palette.text.secondary} strokeWidth={strokeWidth} strokeDasharray=\"5,5\"\n              />\n              <rect // Box\n              x={mapped(q25)} y={plotY1} width={mapped(q75) - mapped(q25)} height={plotHeight}\n              stroke={muiTheme.palette.text.primary} strokeWidth={strokeWidth} fill={muiTheme.palette.plotFill}\n              />\n              <VerticalLine x={mapped(min)} />\n              <VerticalLine x={mapped(q50)} />\n              <VerticalLine x={mapped(max)} />\n              <circle cx={mapped(avg)} cy={centerY} r={4} fill={muiTheme.palette.warning.main} />\n          </svg>\n      );\n      return (\n        <ClickCard trigger={drawing} tooltip={null} title={`Boxplot stats`}>\n          <JsonBox obj={data} />\n        </ClickCard>\n      )\n  }\n  });\n\n  export default HorizontalBoxPlot;","import { Box } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport React from 'react';\nimport { useEffect, useRef } from 'react';\nimport { useBoxPlotData } from '@/hooks/useApiData';\nimport BoxPlotControls from './BoxPlotControls';\nimport { BasicTable } from '@/components/elements/BasicTable';\nimport { useMemo } from 'react';\nimport HorizontalBoxPlot from '@/components/elements/HorizontalBoxPlot';\nimport { boxPlotSlice } from '@/store/boxPlotSlice';\nimport { useNumberColumns } from '@/hooks/useColumnPreference';\nimport { useSelector } from 'react-redux';\nimport { COL_DEF_NUMBER } from '@/utils/agGridUtils';\nimport { buildProgressBarRenderer } from '@/utils/agGridUtils';\nimport _ from 'lodash';\nimport useMUITheme from '@/hooks/useMUITheme';\n\nconst BoxPlot = React.memo(function BoxPlot() {\n  const dispatch = useDispatch();\n  const isFirstRender = useRef(true);\n  const { data, loading, error } = useBoxPlotData();\n  const boxPlotSortBy = useSelector(state => state.settings.boxPlotSortBy);\n  const boxPlotBreakdownColumn = useSelector(state => state.settings.boxPlotBreakdownColumn);\n  const muiTheme = useMUITheme();\n  const totalCount = _.sumBy(data, 'count');\n  const numberColumns = useNumberColumns();\n\n  useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    } else {\n      dispatch(boxPlotSlice.actions.setShouldRefresh());\n    }\n  }, [dispatch]);\n\n\n\n  const globalRange = _(numberColumns).map(key =>[key, {\n    globalMin: _(data).map(row => row[key]?.min).min(),\n    globalMax: _(data).map(row => row[key]?.max).max(),\n  }]).fromPairs().value();\n\n  const overridingColDefs = useMemo(() => {\n    return {\n      breakdown: {\n        pinned: 'left',\n        headerName: boxPlotBreakdownColumn,\n      },\n      count: {\n        ...COL_DEF_NUMBER(muiTheme),\n        cellRenderer: buildProgressBarRenderer({min: 0, max: totalCount, isPercent: false, muiTheme}),\n\n      },\n      rowIndex: {\n        hide: true,\n      },\n      ..._.mapValues(globalRange, (range, key) => ({\n        headerName: key,\n        valueFormatter: params => params.value, // In order to mute the warning\n        cellRenderer: params => <HorizontalBoxPlot data={{...params.value, ...range}} width={150} />,\n        comparator: (a, b) => {\n          return a[boxPlotSortBy] - b[boxPlotSortBy];\n        }\n      })),\n    };\n  }, [globalRange, boxPlotSortBy, boxPlotBreakdownColumn, muiTheme, totalCount]);\n\n\n\n  return (\n    <Box sx={{display: 'flex', flexDirection: 'column', height: '100%'}}>\n      <BoxPlotControls />\n      {error && <Box sx={{p: 1, color: 'error.main'}}>{error}</Box>}\n      <Box sx={{flex: 1, padding: 1, width: '100%', height: '100%'}}>\n        {data && <BasicTable initRowData={data} overridingColDefs={overridingColDefs} />}\n      </Box>\n    </Box>\n  );\n\n});\n\nexport default BoxPlot;","import { Box, Button, Typography } from '@mui/material';\nimport { MyTooltip } from '@/components/elements/displays';\nimport NorthEastIcon from '@mui/icons-material/NorthEast';\nimport SouthEastIcon from '@mui/icons-material/SouthEast';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport React from 'react';\nimport { toggleHeatmapColumnSort } from '@/store/viewingSlice';\n\n\nexport const HeatmapRowHeader = React.memo(({value}) => {\n  const dispatch = useDispatch();\n\n  const sortOrder = useSelector(createSelector(\n    (state) => state.viewing.heatmapColumnSort,\n    (heatmapColumnSort) => {\n      const { byRow, order } = heatmapColumnSort || {};\n      const isSorted = byRow === value;\n      if (isSorted) {\n        return order;\n      } else {\n        return null;\n      }\n    }\n  ));\n\n  const isSorted = sortOrder !== null;\n\n  const handleClick = () => {\n    dispatch(toggleHeatmapColumnSort(value));\n  }\n\n\n  const getIcon = () => {\n    if (!isSorted) {\n      return null;\n    } else if (sortOrder === 'asc') {\n      return <NorthEastIcon fontSize='small'/>;\n    } else if (sortOrder === 'desc') {\n      return <SouthEastIcon fontSize='small'/>;\n    } else {\n      return null;\n    }\n  }\n  const icon = getIcon();\n\n  return (\n    <Button variant='text' onClick={handleClick} sx={{\n      textTransform: 'none', fontSize: 'inherit',\n      width: '100%', height: '100%',\n      display: 'flex', flexDirection: 'row', alignItems: 'center',\n      gap: 1,\n      color: isSorted ? 'primary.main' : 'text.primary'\n      }}>\n\n      <Typography variant=\"body2\" sx={{\n        textAlign: 'left', textOverflow: 'ellipsis', overflow: 'hidden', whiteSpace: 'nowrap',\n        flex: 1\n      }}>\n        {value}\n      </Typography>\n\n      {icon && <Box sx={{flex: 0}}><MyTooltip title={`Columns are sorted by counts in this row`}>{icon}</MyTooltip></Box>}\n    </Button>\n\n  );\n});\n\nHeatmapRowHeader.displayName = 'HeatmapRowHeader';\n\nexport default HeatmapRowHeader;","\nimport { COL_DEF_NUMBER, numberValueFormatter } from '@/utils/agGridUtils';\nimport { buildProgressBarRenderer } from '@/utils/agGridUtils';\nimport { redBlueColorScale } from '@/utils/redBlueColorScale';\nimport HeatmapRowHeader from './HeatmapRowHeader';\nimport { Y_LABEL_VALUE } from '@/store/heatMapSlice';\n\n\nconst headerColDef = (yColumn) => {\n  return {\n    headerName: yColumn,\n    headerStyle: {\n      paddingLeft: '8px',\n    },\n    pinned: 'left',\n    field: Y_LABEL_VALUE,\n    colId: Y_LABEL_VALUE,\n    lockPosition: true,\n    flex: 1,\n    cellRenderer: HeatmapRowHeader,\n  };\n}\n\nconst totalColDef = (allStats, muiTheme) => {\n  return {\n    headerName: 'rowTotal',\n    headerStyle: {\n      paddingLeft: '8px',\n    },\n    maxWidth: 200,\n    field: 'rowTotal',\n    pinned: 'right',\n    flex: 1,\n    lockPosition: true,\n    colId: 'rowTotal',\n    ...COL_DEF_NUMBER(muiTheme),\n    cellRenderer: buildProgressBarRenderer({min: 0, max: allStats.sum, isPercent: false, muiTheme}),\n  }\n}\n\nconst dataColDef = ({xLabel, xColumn, allStats, muiTheme}) => {\n  return {\n    headerName: String(xLabel),\n    field: xLabel,\n    headerTooltip: `${xColumn}: ${xLabel}`,\n    flex: 1,\n    valueGetter: (params) => params.data[xLabel]?.cnt,\n    valueFormatter: numberValueFormatter,\n    cellRenderer: params => {\n      if (params.data.isPinned) {\n        const renderer = buildProgressBarRenderer({min: 0, max: allStats.sum, isPercent: false, muiTheme});\n        return renderer(params);\n      }\n      return params.value;\n    }\n  }\n}\n\nconst dataCellStyle = ({xLabel, xStats, yStats, normalizeColor, muiTheme, allStats}) => {\n  return params => {\n    if (params.data.isPinned) {\n      return COL_DEF_NUMBER(muiTheme).cellStyle;\n    }\n    let range = [allStats.min, allStats.max];\n    if (normalizeColor === 'per_row') {\n      const y = params.data[Y_LABEL_VALUE];\n      range = [yStats[y].min, yStats[y].max];\n    } else if (normalizeColor === 'per_column') {\n      range = [xStats[xLabel].min, xStats[xLabel].max];\n    }\n    const style = redBlueColorScale({min: range[0], max: range[1], value: params.value});\n    return {\n      ...style,\n      textAlign: 'right',\n      paddingRight: '8px',\n      fontFamily: 'monospace',\n      cursor: 'pointer',\n      fontSize: muiTheme.typography.fontSize,\n    };\n  }\n}\n\n\nexport const computeColDefs = ({data, normalizeColor, xColumn, yColumn, muiTheme}) => {\n  if (!data) {\n    return [];\n  }\n  const {xLabels, xStats, yStats, allStats} = data || {};\n\n\n  const colDefsDataColumns = xLabels?.map(xLabel => ({\n    ...dataColDef({xLabel, xColumn, allStats, muiTheme}),\n    headerStyle: {\n      paddingLeft: '8px',\n    },\n    cellStyle: dataCellStyle({xLabel, xStats, yStats, normalizeColor, muiTheme, allStats}),\n  }));\n\n\n  return [\n      headerColDef(yColumn),\n      totalColDef(allStats, muiTheme),\n     ...colDefsDataColumns,\n  ];\n}","import { isMissing } from '@/utils/helpers';\n\nexport function redBlueColorScale({min, max, value}) {\n\n    if (isMissing(value)) {\n        return {};\n    }\n    // Clamp and normalize to 0..1\n    const t = Math.max(0, Math.min(1, (value - min) / (max - min)));\n\n    // Define control points\n    const lowColor = [0, 90, 180];       // blue\n    const midColor = [180, 180, 180];    // gray\n    const highColor = [200, 30, 0];      // red\n\n    let interp;\n    if (t < 0.5) {\n        // Interpolate from low to mid\n        const localT = t / 0.5;\n        interp = lowColor.map((c, i) => Math.round(c + (midColor[i] - c) * localT));\n    } else {\n        // Interpolate from mid to high\n        const localT = (t - 0.5) / 0.5;\n        interp = midColor.map((c, i) => Math.round(c + (highColor[i] - c) * localT));\n    }\n\n    const backgroundColor =  `rgb(${interp[0]}, ${interp[1]}, ${interp[2]})`;\n    const [r, g, b] = interp;\n\n\n    // Calculate luminance to determine contrast\n    const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\n    const color = luminance > 0.5 ? '#000000' : '#ffffff';\n\n    return {\n        backgroundColor,\n        color\n    };\n};\n","import DropdownInSettings from '@/components/settings/DropdownInSettings';\nimport { SettingsCard } from '@/components/elements/ClickCard';\n\nconst HeatmapSettings = () => {\n\n    return (\n        <SettingsCard title=\"Heatmap Settings\">\n\n\n\n            <DropdownInSettings settingKey=\"heatmapNormalizeColor\" />\n\n        </SettingsCard>\n    )\n\n}\n\nexport default HeatmapSettings;","import React from 'react';\nimport HeatmapSettings from '@/components/heatmap/HeatmapSettings';\nimport PanelControlsWrapper from '@/components/elements/PanelControlsWrapper';\n\nimport { heatMapSlice } from '@/store/heatMapSlice';\nimport SelectColumnInSettings from '@/components/elements/SelectColumnInSettings';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { MyIconButton } from '@/components/elements/Controls';\nimport SwapHorizIcon from '@mui/icons-material/SwapHoriz';\nimport { updateSettings } from '@/store/settingsSlice';\nimport SqlCard from '@/components/elements/SqlCard';\nimport { CategoryColumnSelector } from '@/components/elements/SelectColumnInSettings';\n\nconst HeatmapControls = React.memo(function HeatmapControls({}) {\n    const dispatch = useDispatch();\n    const heatmapXColumn = useSelector((state) => state.settings.heatmapXColumn);\n    const heatmapYColumn = useSelector((state) => state.settings.heatmapYColumn);\n    const refreshHeatMapData = () => {\n      dispatch(heatMapSlice.actions.setShouldRefresh());\n    }\n\n    const swapColumns = () => {\n      dispatch(updateSettings({heatmapXColumn: heatmapYColumn, heatmapYColumn: heatmapXColumn}));\n      refreshHeatMapData();\n    }\n    return (\n        <PanelControlsWrapper>\n\n            <SelectColumnInSettings\n                settingKey=\"heatmapXColumn\"\n                label=\"X column\"\n                onValueChange={refreshHeatMapData}\n                showStats=\"left\"\n                columnSelector={CategoryColumnSelector}\n            />\n\n            <MyIconButton icon={<SwapHorizIcon/>} onClick={swapColumns} iconSize='large'/>\n\n            <SelectColumnInSettings\n                settingKey=\"heatmapYColumn\"\n                label=\"Y column\"\n                onValueChange={refreshHeatMapData}\n                showStats=\"right\"\n                columnSelector={CategoryColumnSelector}\n            />\n\n            <SqlCard sqlKey=\"heatMap\"/>\n            <HeatmapSettings />\n        </PanelControlsWrapper>\n    );\n});\n\nexport default HeatmapControls;","\nimport { Box } from '@mui/material';\nimport { useHeatMapData } from '@/hooks/useApiData';\n\nimport { AgGridReact } from 'ag-grid-react';\nimport { AGGridResponsiveContainer } from '@/components/elements/displays';\nimport { useRef } from 'react';\nimport useAGGridTheme from '@/hooks/useAGGridTheme';\nimport { useSelector } from 'react-redux';\nimport { AllCommunityModule, ModuleRegistry } from 'ag-grid-community';\nimport { useMemo } from 'react';\nimport { useEffect } from 'react';\nimport { computeColDefs } from './colDefs';\nimport { useDispatch } from 'react-redux';\nimport useMUITheme from '@/hooks/useMUITheme';\nimport { useCallback } from 'react';\nimport _ from 'lodash';\nimport { heatMapSlice, Y_LABEL_VALUE } from '@/store/heatMapSlice';\nimport React from 'react';\nimport { sanitizeName, sanitizeValue } from '@/utils/sql/helpers';\nimport HeatmapControls from './HeatmapControls';\nimport { setSampleCondition } from '@/store/viewingSlice';\nimport { fetchRandomRowData } from '@/store/rowDataSlice';\n\n// Register all Community features\nModuleRegistry.registerModules([AllCommunityModule]);\n\n\nconst HeatmapTable = React.memo(() => {\n  const dispatch = useDispatch();\n  const { data, loading, error } = useHeatMapData();\n  const rowData = useMemo(() => data?.rowData || [], [data]);\n  const pinnedTopRowData = useMemo(() => {\n    return [{\n      ..._.mapValues(data?.xStats || {}, (v) => ({cnt: v.sum})),\n      isPinned: true,\n      [Y_LABEL_VALUE]: 'columnTotal',\n      rowTotal: data?.allStats?.sum}];\n  }, [data]);\n\n  const gridRef = useRef();\n  const agGridTheme = useAGGridTheme({noCellPadding: true});\n  const muiTheme = useMUITheme();\n\n  const xColumn = useSelector((state) => state.settings.heatmapXColumn);\n  const yColumn = useSelector((state) => state.settings.heatmapYColumn);\n  const normalizeColor = useSelector((state) => state.settings.heatmapNormalizeColor);\n  const columnSort = useSelector((state) => state.viewing.heatmapColumnSort);\n\n  useEffect(() => {\n    dispatch(heatMapSlice.actions.setShouldRefresh());\n  }, [xColumn, yColumn, dispatch]);\n\n  const colDefs = useMemo(() => {\n    return computeColDefs({data, muiTheme, xColumn, yColumn, normalizeColor});\n  }, [data, muiTheme, xColumn, yColumn, normalizeColor]);\n\n  const defaultColDef = useMemo(() => ({\n    sortable: true,\n    filter: false,\n    resizable: true,\n    flex: 1,\n    minWidth: 80,\n    wrapHeaderText: true,\n    autoHeaderHeight: true,\n  }), []);\n\n  useEffect(() => {\n    if (data && data.xLabels.length > 0 && gridRef.current && gridRef.current.api && columnSort) {\n      const {byRow, order} = columnSort;\n      function decideOrder() {\n        if (order === 'none') {\n          return _.sortBy(data.xLabels);\n        } else {\n          const row = [...rowData, ...pinnedTopRowData].find(r => r[Y_LABEL_VALUE] === byRow);\n          const nameValuePairs = _.map(data.xLabels, c => [row?.[c]?.cnt || 0, c]);\n          const newCols = _(nameValuePairs).sortBy(pr => pr[0]).map(pr => pr[1]).value();\n          if (order === 'desc') {\n            return _.reverse(newCols);\n          } else if (order === 'asc') {\n            return newCols;\n          } else {\n            return _.sortBy(data.xLabels);\n          }\n        }\n      }\n\n      let newColOrder = decideOrder();\n\n      gridRef.current.api.moveColumns(newColOrder, 2);\n    }\n  }, [columnSort, data, rowData, pinnedTopRowData]);\n\n\n  const onCellClicked = useCallback((params) => {\n    switch (params.column.colId) {\n      case Y_LABEL_VALUE:\n        return;\n      case 'rowTotal':\n        return;\n      default:\n        const x = params.column.colId;\n        const y = params.data[Y_LABEL_VALUE];\n        const sampleCondition = `${sanitizeName(xColumn)} = ${sanitizeValue(x)} AND ${sanitizeName(yColumn)} = ${sanitizeValue(y)}`;\n        dispatch(setSampleCondition(sampleCondition));\n        dispatch(fetchRandomRowData({source: `Samples from heatmap`}));\n\n        return;\n    }\n\n  }, [dispatch, xColumn, yColumn]);\n\n  const onGridReady = useCallback((params) => {\n    params.api.sizeColumnsToFit();\n  }, []);\n\n  const onGridSizeChanged = useCallback((params) => {\n    params.api.sizeColumnsToFit();\n  }, []);\n\n  const onRowDataUpdated = useCallback((params) => {\n    params.api.sizeColumnsToFit();\n  }, []);\n\n\n  if ( !data) {\n      return <HeatmapControls />;\n  }\n\n\n  return (\n    <Box sx={{display: 'flex', flexDirection: 'column', height: '100%'}}>\n      <HeatmapControls />\n\n      <AGGridResponsiveContainer>\n        <AgGridReact\n            domLayout='normal'\n            ref={gridRef}\n            theme={agGridTheme}\n            onCellClicked={onCellClicked}\n            pinnedTopRowData={pinnedTopRowData}\n            rowData={rowData}\n            columnDefs={colDefs}\n            groupHeaderHeight={60}\n            onRowDataUpdated={onRowDataUpdated}\n            defaultColDef={defaultColDef}\n            onGridReady={onGridReady}\n            onGridSizeChanged={onGridSizeChanged}\n        />\n        </AGGridResponsiveContainer>\n\n    </Box>\n  );\n});\n\nHeatmapTable.displayName = 'HeatmapTable';\n\nexport default HeatmapTable;","import { SettingsCard } from '@/components/elements/ClickCard';\nimport SliderInSettings from '@/components/settings/SliderInSettings';\n\nconst HistogramSettings = () => {\n\n    return (\n        <SettingsCard title=\"Histogram Settings\">\n            <SliderInSettings settingKey=\"histogramNumberOfBins\"/>\n        </SettingsCard>\n    )\n\n};\n\nexport default HistogramSettings;","import React from 'react';\nimport { HelpCard } from '@/components/elements/ClickCard';\nimport { KeyboardShortcutsTable, ShortcutRow } from '@/components/elements/KeyboardShortcutsTable';\nimport { SectionHeader } from '@/components/elements/displays';\n\n\nconst PlotlyHelpCard = React.memo(function PlotlyHelpCard({haveLasso=false}) {\n    return (\n        <HelpCard title=\"Plotly Help\">\n            <SectionHeader title=\"Navigation in the figure\" />\n            <KeyboardShortcutsTable>\n                <ShortcutRow\n                    keys={['Scroll']}\n                    descriptions={['Zoom in and out of the histogram.']}\n                />\n                <ShortcutRow\n                    keys={['Drag']}\n                    descriptions={['Move the histogram along the draging direction.']}\n                />\n                <ShortcutRow\n                    keys={['Double Click']}\n                    descriptions={['Reset zoom to auto-fit.']}\n                />\n\n            </KeyboardShortcutsTable>\n\n            <SectionHeader title=\"Operations on data points\" />\n\n            <KeyboardShortcutsTable>\n                <ShortcutRow\n                    keys={['Hover']}\n                    descriptions={[\n                        'See detailed information about the data point under the mouse cursor.'\n                    ]}\n                />\n                <ShortcutRow\n                    keys={['Click']}\n                    descriptions={['See samples of the clicked data point in Gallery.']}\n                />\n                {haveLasso && (\n                    <ShortcutRow\n                        keys={['Drag circle']}\n                        descriptions={['If in lasso mode, select multiple data points by drawing a circle around them.']}\n                    />\n                )}\n\n            </KeyboardShortcutsTable>\n\n            <SectionHeader title=\"Operations on legend\" />\n\n            <KeyboardShortcutsTable>\n\n                <ShortcutRow\n                    keys={['Click']}\n                    descriptions={['Toggle on/off the associated data series.']}\n                />\n                <ShortcutRow\n                    keys={['Double Click']}\n                    descriptions={['Only show the associated data series, and turn off others.']}\n                />\n\n            </KeyboardShortcutsTable>\n\n        </HelpCard>\n    );\n});\n\nexport default PlotlyHelpCard;","import SelectColumnInSettings from '@/components/elements/SelectColumnInSettings';\nimport { useDispatch } from 'react-redux';\nimport { histogramSlice } from '@/store/histogramSlice';\nimport SqlCard from '@/components/elements/SqlCard';\nimport React from 'react';\nimport HistogramSettings from '@/components/histogram/HistogramSettings';\nimport PanelControlsWrapper from '@/components/elements/PanelControlsWrapper';\nimport { NumericColumnSelector, CategoryColumnSelector } from '@/components/elements/SelectColumnInSettings';\nimport PlotlyHelpCard from '@/components/elements/plotly/PlotlyHelpCard';\n\n\n\nconst histogramControls = React.memo(function HistogramControls() {\n    const dispatch = useDispatch();\n\n    const refreshHistogramData = () => {\n        dispatch(histogramSlice.actions.setShouldRefresh());\n    }\n\n    return (\n        <PanelControlsWrapper>\n            <PlotlyHelpCard />\n            <SelectColumnInSettings\n                settingKey=\"histogramBreakdownColumn\"\n                label=\"Breakdown column\"\n                onValueChange={refreshHistogramData}\n                showStats=\"left\"\n                allowEmpty={true}\n                columnSelector={CategoryColumnSelector}\n            />\n\n            <SelectColumnInSettings\n                settingKey=\"histogramColumn\"\n                label=\"HistogramColumn\"\n                onValueChange={refreshHistogramData}\n                showStats=\"right\"\n                columnSelector={NumericColumnSelector}\n            />\n\n            <SqlCard sqlKey=\"histogram\" />\n            <HistogramSettings />\n    </PanelControlsWrapper>\n    )\n});\n\nexport default histogramControls;","import { Box, Typography } from '@mui/material';\nimport HistogramControls from './HistogramControls';\nimport { useHistogramData } from '@/hooks/useApiData';\nimport { histogramSlice } from '@/store/histogramSlice';\nimport { useDispatch } from 'react-redux';\nimport React from 'react';\nimport { useEffect, useRef } from 'react';\nimport dynamic from 'next/dynamic';\n\nconst PlotlyHistogramPlot = dynamic(() => import('./PlotlyHistogramPlot'), { ssr: false });\n\n\nconst Histogram = React.memo(function Histogram() {\n  const dispatch = useDispatch();\n  const isFirstRender = useRef(true);\n  const { data, loading, error } = useHistogramData();\n\n\n\n  useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    } else {\n      dispatch(histogramSlice.actions.setShouldRefresh());\n    }\n  }, [dispatch]);\n\n\n\n  return (\n    <Box sx={{display: 'flex', flexDirection: 'column', height: '100%'}}>\n      <HistogramControls />\n      <Box sx={{flex: 1, padding: 2, width: '100%', height: '100%'}}>\n        {data && <PlotlyHistogramPlot data={data}/>}\n        {error && <Typography variant=\"body2\" color=\"error\">{error}</Typography>}\n      </Box>\n    </Box>\n  );\n\n});\n\n\nexport default Histogram;","import SliderInSettings from '@/components/settings/SliderInSettings';\nimport { SettingsCard } from '@/components/elements/ClickCard';\nimport { useDispatch } from 'react-redux';\nimport { bubblePlotSlice } from '@/store/bubblePlotSlice';\nimport { CategoryColumnSelector } from '@/components/elements/SelectColumnInSettings';\nimport SelectColumnInSettings from '@/components/elements/SelectColumnInSettings';\nimport { Divider } from '@mui/material';\n\nconst BubblePlotSettings = () => {\n    const dispatch = useDispatch();\n\n\n    const refreshBubblePlotData = () => {\n        dispatch(bubblePlotSlice.actions.setShouldRefresh());\n    }\n\n    return (\n        <SettingsCard title=\"Bubble Plot Settings\">\n            <SliderInSettings settingKey=\"bubblePlotMaxMarkerSize\"/>\n            <SliderInSettings settingKey=\"bubblePlotOpacity\"/>\n\n            <Divider sx={{my: 1}}/>\n\n            <SelectColumnInSettings\n                settingKey=\"bubblePlotBreakdownColumn\"\n                label=\"Breakdown\"\n                onValueChange={refreshBubblePlotData}\n                showStats=\"none\"\n                allowEmpty={true}\n                columnSelector={CategoryColumnSelector}\n            />\n\n\n        </SettingsCard>\n    )\n\n}\n\nexport default BubblePlotSettings;","import { Box } from '@mui/material';\nimport SelectColumnInSettings from '@/components/elements/SelectColumnInSettings';\nimport { MyIconButton } from '@/components/elements/Controls';\nimport { useDispatch } from 'react-redux';\nimport { updateSettings } from '@/store/settingsSlice';\nimport { useSelector } from 'react-redux';\nimport SwapHorizIcon from '@mui/icons-material/SwapHoriz';\nimport { bubblePlotSlice } from '@/store/bubblePlotSlice';\nimport SqlCard from '@/components/elements/SqlCard';\nimport BubblePlotSettings from '@/components/bubblePlot/BubblePlotSettings';\nimport PanelControlsWrapper from '@/components/elements/PanelControlsWrapper';\nimport { NumericColumnSelector, CategoryColumnSelector } from '@/components/elements/SelectColumnInSettings';\nimport PlotlyHelpCard from '@/components/elements/plotly/PlotlyHelpCard';\n\nconst BubblePlotControls = () => {\n    const dispatch = useDispatch();\n\n    const bubblePlotXColumn = useSelector((state) => state.settings.bubblePlotXColumn);\n    const bubblePlotYColumn = useSelector((state) => state.settings.bubblePlotYColumn);\n\n    const refreshBubblePlotData = () => {\n        dispatch(bubblePlotSlice.actions.setShouldRefresh());\n    }\n\n    const swapColumns = () => {\n        dispatch(updateSettings({bubblePlotXColumn: bubblePlotYColumn, bubblePlotYColumn: bubblePlotXColumn}));\n        refreshBubblePlotData();\n    }\n\n    return (\n\n        <PanelControlsWrapper>\n            <PlotlyHelpCard haveLasso={true} />\n            <SelectColumnInSettings\n                settingKey=\"bubblePlotXColumn\"\n                label=\"X column\"\n                onValueChange={refreshBubblePlotData}\n                showStats=\"left\"\n                columnSelector={NumericColumnSelector}\n            />\n\n            <MyIconButton icon={<SwapHorizIcon/>} iconSize='large' onClick={swapColumns}/>\n\n            <SelectColumnInSettings\n                settingKey=\"bubblePlotYColumn\"\n                label=\"Y column\"\n                onValueChange={refreshBubblePlotData}\n                showStats=\"right\"\n                columnSelector={NumericColumnSelector}\n            />\n\n            <SqlCard sqlKey=\"bubblePlot\" />\n            <BubblePlotSettings />\n    </PanelControlsWrapper>\n    )\n};\n\nexport default BubblePlotControls;","import { Box } from '@mui/material';\nimport BubblePlotControls from './BubblePlotControls';\nimport { useBubblePlotData } from '@/hooks/useApiData';\nimport { useDispatch } from 'react-redux';\nimport { bubblePlotSlice } from '@/store/bubblePlotSlice';\nimport React from 'react';\nimport { useEffect, useRef } from 'react';\nimport dynamic from 'next/dynamic';\n\nconst PlotlyBubblePlot = dynamic(() => import('./PlotlyBubblePlot'), { ssr: false });\n\n\nconst BubblePlot = React.memo(function BubblePlot() {\n  const dispatch = useDispatch();\n  const isFirstRender = useRef(true);\n  const { data, loading, error } = useBubblePlotData();\n\n  useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    } else {\n      dispatch(bubblePlotSlice.actions.setShouldRefresh());\n    }\n  }, [dispatch]);\n\n\n\n  return (\n    <Box sx={{display: 'flex', flexDirection: 'column', height: '100%'}}>\n      <BubblePlotControls />\n      <Box sx={{flex: 1, padding: 1, width: '100%', height: '100%'}}>\n        {data && <PlotlyBubblePlot data={data}/>}\n      </Box>\n    </Box>\n  );\n\n});\n\nexport default BubblePlot;","import { BasicTable } from '@/components/elements/BasicTable';\nimport { useMemo } from 'react';\nimport ColumnStatsCell from './ColumnStats/ColumnStatsCell';\nimport { buildProgressBarRenderer } from '@/utils/agGridUtils';\nimport useMUITheme from '@/hooks/useMUITheme';\nimport React from 'react';\nimport _ from 'lodash';\nimport { clusterByPrefix } from '@/utils/StringsUtils';\nimport HorizontalBoxPlot from '@/components/elements/HorizontalBoxPlot';\nimport { Box } from '@mui/material';\nimport { ChipList, SectionHeader, TextSegments, TextWithAddon } from '@/components/elements/displays';\nimport { useAllColumnsMeta } from '@/hooks/useApiData';\nimport SqlCard from '@/components/elements/SqlCard';\nimport { useSelector } from 'react-redux';\nimport { coalesce } from '@/utils/helpers';\n\nconst DistributionSummary = React.memo(function DistributionSummary({\n  overridingColDefs={},\n}) {\n  const stats = useSelector(state => state.filteredColumnStats);\n  const muiTheme = useMUITheme();\n  const { data: metaData } = useAllColumnsMeta() || {};\n  const cardinality = useSelector(state => state.cardinality);\n\n  const rowData = useMemo(() => {\n\n    const clusterMapping = clusterByPrefix(metaData.initialOrder);\n    const mappedData = _.map(metaData.initialOrder, columnName => {\n      const { cnt_all, cnt_null } = stats[columnName]?.data || {};\n      const { approxCntD, cntD } = cardinality[columnName]?.data || {};\n      return {\n        'prefix_group': clusterMapping[columnName],\n        'column_type': metaData.meta[columnName].duckdbType,\n        'column_name': columnName,\n        'distribution': null,\n        'null_percentage': cnt_null / cnt_all,\n        'approx_unique': coalesce(cntD, approxCntD),\n      };\n    });\n    return _.sortBy(mappedData, 'prefix_group');\n  }, [stats, metaData, cardinality]);\n\n\n  const _overridingColDefs = useMemo(() => {\n    const colDefs = {\n      prefix_group: {\n        spanRows: true,\n      },\n      column_name: {\n        rowDrag: true,\n        pinned: 'left',\n        cellStyle: {\n          color: muiTheme.palette.text.primary,\n        }\n      },\n\n      distribution: {\n        minWidth: 200,\n        sortable: false,\n        cellRenderer: params => <ColumnStatsCell name={params.data.column_name} />,\n      },\n      null_percentage: {\n        cellRenderer: buildProgressBarRenderer({min: 0, max: 100, isPercent: true, muiTheme, bgColor: 'gray'}),\n      },\n\n      boxplot: {\n        minWidth: 160,\n        sortable: false,\n        valueFormatter: params => params.value, // In order to mute the warning\n        cellRenderer: params => <HorizontalBoxPlot data={params.value} width={150} />,\n      },\n    };\n    return _.merge(colDefs, overridingColDefs);\n  }, [overridingColDefs, muiTheme]);\n\n  const overridingGridOptions = useMemo(() => {\n    return {\n      pagination: false,\n      rowDragManaged: true,\n      animateRows: true,\n      enableCellSpan: true,\n    };\n  }, []);\n\n  if (!stats || !metaData) {\n    return null;\n  }\n\n  const nonPrimitiveColumns = _(metaData.initialOrder).filter(\n    c => !metaData.meta[c].isPrimitive\n  ).map(c => [\n    {text: c, sx: {}}, {text: metaData.meta[c].duckdbType, sx: {color: 'text.secondary', fontFamily: 'monospace'}}\n  ]).value();\n\n  return (\n    <Box sx={{\n      display: 'flex', flexDirection: 'column', padding: 1, height: '100%', gap: 1,\n      backgroundColor: 'background.paper',\n    }}>\n        {nonPrimitiveColumns.length > 0 && (\n          <>\n            <SectionHeader title=\"Columns with non-primitive data types (distribution not shown)\" />\n            <ChipList items={nonPrimitiveColumns.map(it => <TextSegments key={it} segments={it} />)} />\n          </>\n        )}\n\n        <SectionHeader title={\n          <TextWithAddon\n            text=\"Columns with primitive data types\"\n            addon={<SqlCard sqlKey=\"fltSummaryStats\" />}\n\n         />}\n        />\n\n        <BasicTable initRowData={rowData} overridingColDefs={_overridingColDefs} overridingGridOptions={overridingGridOptions} />\n\n    </Box>\n  );\n});\n\n\nexport default DistributionSummary;","export const SQL_KEY = 'freeFormQuery';","import React from 'react';\nimport CodeMirror from '@uiw/react-codemirror';\nimport { sql } from '@codemirror/lang-sql';\nimport { oneDark } from '@codemirror/theme-one-dark';\nimport { format } from 'sql-formatter';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { MyButton } from '@/components/elements/Controls';\nimport { Box } from '@mui/material';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\nimport { setFreeFormQuery } from '@/store/viewingSlice';\nimport { Typography } from '@mui/material';\nimport StatusChip from '@/components/elements/StatusChip';\nimport { runQuery } from '@/utils/api';\nimport { SQL_KEY } from './constants';\n\nconst FreeFormQueryEditor = React.memo(function FreeFormQueryEditor() {\n    const dispatch = useDispatch();\n    const theme = useSelector((state) => state.settings.mode);\n    const tableExpr = useSelector((state) => state.dataFile.tableExpr);\n    const result = useSelector((state) => state.sql[SQL_KEY]) || {};\n\n\n    const [query, setQuery] = useState(format(`SELECT * FROM ${tableExpr} LIMIT 10`));\n\n    const handleRun = async () => {\n        dispatch(setFreeFormQuery(query));\n        await runQuery({dispatch, key: SQL_KEY, query});\n    };\n\n    return (\n        <Box sx={{display: 'flex', flexDirection: 'column', gap: 1, height: '100%'}}>\n            <Box sx={{flex: 1, overflow: 'auto'}}>\n                <CodeMirror\n                height=\"100%\"\n                style={{height: '100%'}}\n                value={query}\n                extensions={[sql()]}\n                onChange={(value) => setQuery(value)}\n                theme={theme === 'dark' ? oneDark : 'light'}\n                />\n            </Box>\n            <Box sx={{height: 50, px: 1, flex: 0, display: 'flex', justifyContent: 'flex-end', alignItems: 'center', gap: 1}}>\n                <StatusChip status={result?.status}/>\n                {result?.runtime && (\n                    <Typography variant=\"body1\">\n                        Runtime: {result?.runtime?.toFixed(5)} seconds\n                    </Typography>\n                )}\n                <Box sx={{flex: 1}}/>\n\n                <MyButton onClick={handleRun}>\n                    Run <PlayArrowIcon />\n                </MyButton>\n            </Box>\n        </Box>\n    );\n});\n\nexport default FreeFormQueryEditor;","import React from 'react';\nimport { BasicTable } from '@/components/elements/BasicTable';\nimport { CircularProgress, Typography } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { SQL_KEY } from './constants';\nimport { TextPlaceHolder } from '@/components/elements/PlaceHolder';\n\nconst FreeFormQueryResult = React.memo(function FreeFormQueryResult() {\n    const { data, loading, error } = useSelector(state => state.sql[SQL_KEY]) || {};\n\n    if (loading) {\n        return <CircularProgress />\n    } else if (error) {\n        return <Typography color=\"error\">Error: {error}</Typography>;\n    } else if (data) {\n        return <BasicTable initRowData={data} />\n    } else {\n        return <TextPlaceHolder text=\"No data\" />\n    }\n});\n\nexport default FreeFormQueryResult;","\"use client\";\n\nimport 'flexlayout-react/style/combined.css';\nimport React from 'react';\nimport FreeFormQueryEditor from '@/components/freeformSql/FreeFormQueryEditor';\nimport FreeFormQueryResult from '@/components/freeformSql/FreeFormQueryResult';\nimport { ROUTES } from '@/constants';\nimport VerticalSplitBox from './VerticalSplitBox';\n\nconst FreeFormSQL = React.memo(function FreeFormSQL({}) {\nreturn (\n  <VerticalSplitBox\n    top={<FreeFormQueryEditor />}\n    bottom={<FreeFormQueryResult />}\n  />\n);\n\n});\n\nFreeFormSQL.displayName = ROUTES.FreeFormSQL;\n\nexport default FreeFormSQL;","\"use client\";\n\nimport 'flexlayout-react/style/combined.css';\nimport MyFlexLayout from './MyFlexLayout';\nimport Table from '@/components/table/Table';\nimport ColumnNavigation from '@/components/ColumnNavigation/ColumnNavigation';\nimport Gallery from '@/components/gallery/Gallery';\nimport RowDetails from '@/components/RowDetails';\nimport React, { useEffect } from 'react';\nimport { ROUTES } from '@/constants';\nimport useDataFile from '@/hooks/useDataFile';\nimport { ColumnFilters } from '@/components/filters/ColumnFilterList';\nimport BoxPlot from '@/components/boxPlot/BoxPlot';\nimport HeatmapTable from '@/components/heatmap/HeatmapTable';\nimport Histogram from '@/components/histogram/Histogram';\nimport BubblePlot from '@/components/bubblePlot/BubblePlot';\nimport { useSearchParams } from 'next/navigation';\nimport DistributionSummary from '@/components/table/DistributionSummary';\nimport FreeFormSQL from '@/components/layout/FreeFormSQL';\nimport FolderBrowser from '@/components/folderBrowser/FolderBrowser';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TABS } from '@/constants';\nimport { LAYOUT_THREE_COLUMNS } from '@/constants';\nimport { pathBasename } from '@/store/folderBrowserSlice';\n\n\n\nconst TabularSliceDice = React.memo(function TabularSliceDice({}) {\n  useDataFile();\n  const searchParams = useSearchParams();\n  const filePath = searchParams.get('filePath');\n  const dispatch = useDispatch();\n\n  // Update document title based on filePath\n  useEffect(() => {\n    if (filePath) {\n      const title = pathBasename(filePath);\n      document.title = title;\n    } else {\n      document.title = 'TabularSliceDice';\n    }\n  }, [filePath]);\n\n  const modelJson = useSelector(state => state.layout.presets[LAYOUT_THREE_COLUMNS]);\n\n  const tabComponents = {\n    [TABS.MainTable]: <Table />,\n    [TABS.ColumnNavigation]: <ColumnNavigation />,\n    [TABS.ColumnFilters]: <ColumnFilters />,\n    [TABS.Gallery]: <Gallery />,\n    [TABS.RowDetails]: <RowDetails />,\n    [TABS.HeatMap]: <HeatmapTable />,\n    [TABS.Histogram]: <Histogram />,\n    [TABS.BoxPlot]: <BoxPlot />,\n    [TABS.BubblePlot]: <BubblePlot />,\n    [TABS.DistributionSummary]: <DistributionSummary />,\n    [TABS.FreeFormSQL]: <FreeFormSQL />,\n    [TABS.BrowseFolder]: <FolderBrowser />,\n  };\n\n\n  return (\n    <MyFlexLayout modelJson={modelJson} tabComponents={tabComponents} />\n  );\n});\n\nTabularSliceDice.displayName = ROUTES.TabularSliceDice;\n\nexport default TabularSliceDice;","import { Tab } from '@/constants';\n\nexport function buildTab({name, component, weight=50} : {name: Tab, component?: string, weight: number}) {\n\n    return {\n        type: 'tab',\n        name, weight,\n        id: `tab-${name}`,\n        component: component || name\n    };\n}\n\nexport function buildTabSet({nameList=[], component='', weight=50} : {nameList: Tab[], component?: string, weight: number}) {\n    return {\n        type: 'tabset',\n        weight,\n        id: `tabset-${nameList.join('-')}`,\n        children: nameList.map(name => buildTab({name, component, weight}))\n    };\n}\n\n\nexport const FLEX_LAYOUT_GLOBAL = {\n    tabEnableFloat: false,\n    tabEnableRename: false,\n    tabSetHeaderHeight: 16,\n    splitterSize: 4,\n    keepComponentState: true,\n    tabEnableClose: true,\n    enableRenderOnDemand: false,\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst dataFileSlice = createSlice({\n  name: 'dataFile',\n  initialState: {\n    filePath: null,\n    fileFormat: null,\n    tableExpr: null,\n  },\n  reducers: {\n    setDataFile: (state, action) => {\n      const { filePath, fileFormat } = action.payload;\n      state.filePath = filePath;\n      state.fileFormat = fileFormat;\n      state.tableExpr = `read_${fileFormat}('${filePath}')`;\n    },\n  },\n});\n\nexport const { setDataFile } = dataFileSlice.actions;\nexport default dataFileSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { buildTabSet } from '@/components/layout/utils';\nimport { TABS, LAYOUT_TWO_COLUMNS, LAYOUT_THREE_COLUMNS, LAYOUT_SIDE_BY_SIDE } from '@/constants';\n\nconst LAYOUT_PRESETS = {\n    [LAYOUT_THREE_COLUMNS]: {\n        layout: {\n            type: 'row',\n            children: [\n              buildTabSet({nameList: [TABS.ColumnNavigation], weight: 15}),\n              {\n                type: 'row',\n                weight: 60,\n                children: [\n                    buildTabSet({nameList: [\n                      TABS.MainTable,\n                      TABS.BubblePlot,\n                      TABS.HeatMap,\n                      TABS.Histogram,\n                      TABS.BoxPlot,\n                    ], weight: 50}),\n                    buildTabSet({nameList: [\n                      TABS.Gallery, TABS.DistributionSummary, TABS.FreeFormSQL, TABS.BrowseFolder\n                    ], weight: 30})\n                ]\n            },\n            buildTabSet({nameList: [TABS.RowDetails, TABS.ColumnFilters], weight: 25})\n          ]\n        }\n    },\n    [LAYOUT_TWO_COLUMNS]: {\n        layout: {\n            type: 'row',\n            children: [\n              buildTabSet({nameList: [TABS.ColumnNavigation, TABS.RowDetails, TABS.ColumnFilters], weight: 15}),\n              {\n                type: 'row',\n                weight: 60,\n                children: [\n                    buildTabSet({nameList: [\n                      TABS.MainTable,\n                      TABS.Histogram, TABS.BubblePlot, TABS.BoxPlot, TABS.HeatMap,\n                    ], weight: 50}),\n                    buildTabSet({nameList: [\n                      TABS.Gallery, TABS.DistributionSummary, TABS.FreeFormSQL, TABS.BrowseFolder\n                    ], weight: 50})\n                ]\n            }\n\n          ]\n        }\n    },\n    [LAYOUT_SIDE_BY_SIDE]: {\n        layout: {\n            type: 'row',\n            children: [\n                buildTabSet({nameList: [TABS.Gallery, TABS.RowDetails, TABS.ColumnFilters], weight: 50}),\n                buildTabSet({nameList: [TABS.Histogram, TABS.BubblePlot, TABS.BoxPlot, TABS.HeatMap], weight: 50}),\n            ]\n        }\n    }\n\n}\n\nconst layoutSlice = createSlice({\n  name: 'layout',\n  initialState: {\n    current: null,\n    presets: LAYOUT_PRESETS,\n    target: null\n\n  },\n  reducers: {\n    saveCurrentLayout: (state, action) => {\n      state.current = action.payload;\n    },\n    setTargetLayout: (state, action) => {\n      state.target = action.payload;\n    }\n  },\n});\n\n\n\n\n\nexport const {\n  saveCurrentLayout,\n  setTargetLayout,\n} = layoutSlice.actions;\n\nexport default layoutSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport settingsReducer from './settingsSlice';\nimport { rowDataSlice } from './dataSlice';\nimport { agColDefsSlice } from './agColDefsSlice';\nimport { columnPreferenceSlice } from './columnPreferenceSlice';\nimport { columnMetaSlice } from './dataSlice';\nimport sqlReducer from './sqlSlice';\nimport viewingReducer from './viewingSlice';\nimport dataSourceReducer from './dataFileSlice';\nimport { boxPlotSlice } from './boxPlotSlice';\nimport folderBrowserReducer from './folderBrowserSlice';\nimport { baselineColumnStatsSlice, filteredColumnStatsSlice, cardinalitySlice } from './dataSlice';\nimport { heatMapSlice } from './heatMapSlice';\nimport { histogramSlice } from './histogramSlice';\nimport { bubblePlotSlice } from './bubblePlotSlice';\nimport layoutReducer from './layoutSlice';\nimport { initSettingsSlice } from './dataSlice';\nimport derivedColumnsReducer from './derivedColumnsSlice';\nimport toastReducer from './toastSlice';\n\nexport const rootReducer = {\n  viewing: viewingReducer,\n  settings: settingsReducer,\n  folderBrowser: folderBrowserReducer,\n  dataFile: dataSourceReducer,\n  sql: sqlReducer,\n  columnMeta: columnMetaSlice.reducer,\n  agColDefs: agColDefsSlice.reducer,\n  columnPreference: columnPreferenceSlice.reducer,\n  rowData: rowDataSlice.reducer,\n  baselineColumnStats: baselineColumnStatsSlice.reducer,\n  filteredColumnStats: filteredColumnStatsSlice.reducer,\n  cardinality: cardinalitySlice.reducer,\n  boxPlot: boxPlotSlice.reducer,\n  heatMap: heatMapSlice.reducer,\n  histogram: histogramSlice.reducer,\n  bubblePlot: bubblePlotSlice.reducer,\n  layout: layoutReducer,\n  initSettings: initSettingsSlice.reducer,\n  derivedColumns: derivedColumnsReducer,\n  toast: toastReducer,\n};\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: false,\n    }),\n});\n\n"],"names":["data","useAllColumnsMeta","cardinality","useSelector","state","columnPreference","rowData","useMemo","_data$initialOrder","initialOrder","map","c","_cardinality$c","meta","name","duckdbType","agType","_objectSpread","_","min","String","max","preference","getAllKeys","useCallback","field","r","flatten","uniq","value","overridingColDefs","pinned","children","concat","headerName","columnGroupShow","_jsx","BasicTable","initRowData","IconAnalyticsSettings","React","Box","sx","flex","_jsxs","BottomIconCard","title","icon","InsightsOutlinedIcon","width","height","SliderInSettings","settingKey","InspectSql","sql","muiTheme","useMUITheme","Object","entries","_ref","_ref2","_slicedToArray","key","details","status","cellStyle","params","color","palette","success","main","error","warning","runtime","text","secondary","cellRenderer","SqlCard","sqlKey","displayName","IconLayoutShortcut","presetName","dispatch","useDispatch","presets","layout","MyTooltip","IconButton","size","onClick","setTargetLayout","SX_TEXT_HOVER","LayoutSection","_objectDestructuringEmpty","currentLayout","current","BottomSection","LayoutIconThreeColumns","LAYOUT_THREE_COLUMNS","LayoutIconTwoColumns","LAYOUT_TWO_COLUMNS","LayoutIconSideBySide","LAYOUT_SIDE_BY_SIDE","MoreVertOutlinedIcon","SectionHeader","JsonBox","obj","SectionDebug","settings","enableDebugging","SdCardOutlinedIcon","InspectState","ViewColumnOutlinedIcon","initMaximized","InspectColumnMeta","SqlStatusCount","count","meaning","Typography","id","SqlStatus","_useSqlStatus","createSelector","_useSqlStatus$success","_useSqlStatus$error","_useSqlStatus$running","running","_Fragment","VerticalDivider","display","flexDirection","alignItems","gap","SQLIcon","filePath","dataFile","cntRows","viewing","pagination","countFiltered","sorting","agColDefs","countColumns","columnMeta","length","BottomBarWrapper","BottomStatus","k","v","toLocaleString","i","order","toUpperCase","join","PlaceHolder","backgroundColor","justifyContent","TextPlaceHolder","variant","SpinningPlaceHolder","CircularProgress","modelJson","tabComponents","mode","initialModel","global","FLEX_LAYOUT_GLOBAL","_useState","useState","Model","model","setModel","targetLayout","target","useEffect","saveCurrentLayout","toJson","onModelChange","action","className","position","Layout","factory","node","componentName","getComponent","component","padding","useVisibility","onRenderTab","renderValues","isSelected","tabName","getName","content","pl","pr","margin","_defineProperty","RandomSampling","pageSize","sampleCondition","isMissing","MyButton","fetchRandomRowData","source","PaginationBar","shallowEqual","pageNumber","countBaseline","rowDataSource","handleChangePage","event","newPage","updatePagination","rowDataSlice","handleChangeRowsPerPage","newPageSize","parseInt","backToTable","setRowDataSource","setSampleCondition","tableSettings","SettingsCard","countAll","FilteredCount","label","px","TablePagination","labelDisplayedRows","from","to","page","onPageChange","labelRowsPerPage","rowsPerPage","onRowsPerPageChange","showFirstButton","showLastButton","minHeight","my","py","fontSize","textOverflow","overflow","whiteSpace","pinnedTopData","isTopRow","gridOptions","domLayout","animateRows","headerHeight","suppressColumnVirtualisation","suppressRowVirtualisation","ModuleRegistry","AllCommunityModule","Table","gridRef","useRef","_useRowData","useRowData","loading","agGridTheme","useAGGridTheme","noCellPadding","defaultColDef","useDefaultColDef","expandedColumnDefs","useExpandedColumnDefs","unsubscribe","store","justClickedColumn","runGridApi","api","ensureColumnVisible","func","_gridRef$current","handleColumnChange","newDefs","pickAgColDefs","setColumnDefs","updateVisibleColumns","_params$api$getHorizo","getHorizontalPixelRange","left","right","visibleColumns","getAllDisplayedColumns","filter","getLeft","getActualWidth","colDef","setVisibleColumns","table","AgGridReact","ref","theme","pinnedTopRowData","onSortChanged","newSorting","getColumns","col","sortIndex","sort","sortBy","setSorting","columnDefs","onColumnMoved","onColumnVisible","onRowClicked","setJustClickedRow","rowIndex","onBodyScroll","flexGrow","ColumnItem","searchText","columnName","isHidden","hide","colPref","useSingleColumnPreference","isPinned","showFloatingIcon","setShowFloatingIcon","isVisibleInTable","includes","ListItem","nameAndControls","RenderTypeIcon","renderType","cellDataType","ListItemButton","setJustClickedColumn","ListItemText","paddingLeft","textDecoration","highlightMatch","FloatingRightContainer","ColumnHideIcon","ToggleColumnPinIcon","onMouseEnter","onMouseLeave","ItemType","ItemContainer","item","index","moveItem","onDrop","_useDrop","useDrop","accept","collect","monitor","handlerId","getHandlerId","hover","_ref$current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","_useDrop2","_useDrag","useDrag","type","isDragging","_useDrag2","drag","preview","getEmptyImage","captureDraggingState","opacity","style","layerStyles","pointerEvents","zIndex","getItemStyles","initialOffset","currentOffset","x","transform","WebkitTransform","CustomDragLayer","_useDragLayer","useDragLayer","getItem","itemType","getItemType","getInitialSourceClientOffset","getSourceClientOffset","borderRadius","boxShadow","SwapVertOutlinedIcon","ListContainer","initialItems","onDropComplete","items","setItems","itemsRef","prevItems","update","$splice","handleDrop","droppedItem","renderItem","DndProvider","backend","HTML5Backend","List","border","borderColor","UrlSegment","_ref$sx","fontFamily","UrlSeparator","fontWeight","ParamKey","_ref3","ParamValue","_ref4","maxWidth","minWidth","RainbowUrl","_ref5","baseUrl","fullUrl","toFullUrl","NextLink","href","flexWrap","keys","ParamsURL","singleRowData","useSetting","evaluatedParams","setEvaluatedParams","_useState2","setFullUrl","evaluateData","_asyncToGenerator","_regeneratorRuntime","_callee","results","_context","prev","next","evaluateDictExpressions","sent","stop","apply","arguments","maxHeight","ColumnPreview","column","slice","setRenderType","columnBuffer","setColumnBuffer","_useState3","setName","_useState4","setBaseUrl","_useState5","setParams","getNewColumn","supportedRenderTypes","RENDER_TYPES","p","MyDropdown","options","onValueChange","MyTextField","monospace","_ref8","newParams","_toConsumableArray","setParamKey","TextWithAddon","addon","HelpOutlineOutlinedIcon","setParamValue","MyIconButton","ClearOutlinedIcon","splice","deleteParam","startIcon","AddOutlinedIcon","_ref6","_ref7","UndoOutlinedIcon","newColumn","VisibilityOutlinedIcon","updateDerivedColumn","CheckOutlinedIcon","trigger","ICONS_FOR_RENDER_TYPE","ClickCard","anchorHorizontal","anchorVertical","transformOriginHorizontal","transformOriginVertical","DerivedColumnEdit","DerivedColumns","derivedColumns","SX_BORDER","DerivedColumnItem","setSearchText","_useColumnDefs","useColumnDefs","itemsData","d","Paper","droppedId","allItems","newColumnDefs","IFrameVisualizationInGallery","galleryItemSize","url","src","row","galleryVisualColumn","galleryCaptionColumn","justClickedRow","caption","float","divider","bgcolor","cursor","ImageBox","cropSquare","makeVisual","WarningBox","WarningCard","NumericColumnSelector","isNumeric","allNull","singleValue","CategoryColumnSelector","SelectColumnInSettings","_ref4$onValueChange","_ref4$promptIfNoCandi","promptIfNoCandidates","_ref4$showStats","showStats","_ref4$multiple","multiple","columnSelector","_ref4$allowEmpty","allowEmpty","_ref4$extraCandidates","extraCandidates","allColumnsMeta","allRenderTypes","useAllRenderTypes","candidates","colName","missingValue","setValue","newValue","updateSettings","warningContent","MiniParagraph","dropdown","MyTypeaheadDropdown","onChange","stats","ColumnStatsCell","RowBoxes","GalleryVisualColumn","GalleryCaptionColumn","GalleryControls","PanelControlsWrapper","GalleryItem","selectedRow","displayValue","_columnPreference$fie","showUrl","displayedValue","primary","_useSelector","fileFormat","searchParams","useSearchParams","userRequestedFilePath","get","userRequestedFileFormat","rootFolder","folderBrowserRootFolder","format","path","setDataFile","pathDirname","Error","VerticalSplitBox","_ref$initTopHeight","initTopHeight","topHeight","setTopHeight","containerHeight","setContainerHeight","containerRef","updateContainerHeight","clientHeight","resizeObserver","ResizeObserver","observe","disconnect","getPixelHeight","percentage","parseFloat","currentPixelHeight","onMouseDown","e","startY","clientY","startPixelHeight","onMouseMove","delta","newPixelHeight","Math","updateHeight","document","addEventListener","onMouseUp","removeEventListener","ColumnFilterList","columnNames","messageIfEmpty","ColumnFilters","filters","_state$columnMeta","_state$columnMeta$dat","primitiveColumns","havingFilter","withoutFilter","initSettings","useInitSettings","refreshBoxPlotData","boxPlotSlice","DropdownInSettings","shortLabel","_ref$width","_ref$strokeWidth","strokeWidth","heightOfColumnDistribution","avg","centerY","plotY1","plotHeight","plotY2","q25","q50","q75","globalMin","coalesce","globalMax","mapped","VerticalLine","x1","x2","y1","y2","stroke","drawing","background","card","strokeDasharray","fill","plotFill","cx","cy","tooltip","isFirstRender","_useBoxPlotData","useBoxPlotData","boxPlotSortBy","boxPlotBreakdownColumn","totalCount","numberColumns","useNumberColumns","globalRange","_row$key","_row$key2","fromPairs","breakdown","COL_DEF_NUMBER","buildProgressBarRenderer","isPercent","range","valueFormatter","HorizontalBoxPlot","comparator","a","b","BoxPlotControls","HeatmapRowHeader","sortOrder","heatmapColumnSort","byRow","isSorted","NorthEastIcon","SouthEastIcon","Button","toggleHeatmapColumnSort","textTransform","textAlign","headerColDef","yColumn","headerStyle","Y_LABEL_VALUE","colId","lockPosition","totalColDef","allStats","sum","dataCellStyle","xLabel","xStats","yStats","normalizeColor","interp","t","midColor","highColor","localT","round","_interp","_interp2","redBlueColorScale","paddingRight","typography","computeColDefs","xColumn","xLabels","colDefsDataColumns","headerTooltip","valueGetter","_params$data$xLabel","cnt","numberValueFormatter","renderer","dataColDef","heatmapXColumn","heatmapYColumn","refreshHeatMapData","heatMapSlice","SwapHorizIcon","iconSize","HeatmapSettings","HeatmapTable","_useHeatMapData","useHeatMapData","_data$allStats","_objectSpread2","heatmapNormalizeColor","columnSort","colDefs","sortable","resizable","wrapHeaderText","autoHeaderHeight","newColOrder","find","nameValuePairs","_row$c","newCols","decideOrder","moveColumns","onCellClicked","sanitizeName","sanitizeValue","onGridReady","sizeColumnsToFit","onGridSizeChanged","onRowDataUpdated","HeatmapControls","AGGridResponsiveContainer","groupHeaderHeight","_ref$haveLasso","haveLasso","HelpCard","KeyboardShortcutsTable","ShortcutRow","descriptions","refreshHistogramData","histogramSlice","PlotlyHelpCard","HistogramSettings","PlotlyHistogramPlot","dynamic","ssr","loadableGenerated","webpack","resolveWeak","_useHistogramData","useHistogramData","HistogramControls","Divider","bubblePlotSlice","bubblePlotXColumn","bubblePlotYColumn","refreshBubblePlotData","BubblePlotSettings","PlotlyBubblePlot","_useBubblePlotData","useBubblePlotData","BubblePlotControls","_ref$overridingColDef","filteredColumnStats","metaData","clusterMapping","clusterByPrefix","mappedData","_stats$columnName","_cardinality$columnNa","cnt_all","cnt_null","approxCntD","cntD","_overridingColDefs","prefix_group","spanRows","column_name","rowDrag","distribution","null_percentage","bgColor","boxplot","overridingGridOptions","rowDragManaged","enableCellSpan","nonPrimitiveColumns","isPrimitive","ChipList","it","TextSegments","segments","SQL_KEY","FreeFormQueryEditor","_result$runtime","tableExpr","result","query","setQuery","handleRun","setFreeFormQuery","runQuery","CodeMirror","extensions","oneDark","StatusChip","toFixed","PlayArrowIcon","FreeFormSQL","FreeFormQueryResult","ROUTES","TabularSliceDice","_tabComponents","useDataFile","pathBasename","TABS","ColumnNavigation","Gallery","RowDetails","Histogram","BoxPlot","BubblePlot","DistributionSummary","FolderBrowser","MyFlexLayout","buildTabSet","_ref2$nameList","nameList","_ref2$component","_ref2$weight","weight","_ref$weight","buildTab","tabEnableFloat","tabEnableRename","tabSetHeaderHeight","splitterSize","keepComponentState","tabEnableClose","enableRenderOnDemand","dataFileSlice","createSlice","initialState","reducers","_action$payload","payload","actions","reducer","LAYOUT_PRESETS","_LAYOUT_PRESETS","layoutSlice","_layoutSlice$actions","rootReducer","viewingReducer","settingsReducer","folderBrowser","folderBrowserReducer","dataSourceReducer","sqlReducer","columnMetaSlice","agColDefsSlice","columnPreferenceSlice","baselineColumnStats","baselineColumnStatsSlice","filteredColumnStatsSlice","cardinalitySlice","boxPlot","heatMap","histogram","bubblePlot","layoutReducer","initSettingsSlice","derivedColumnsReducer","toast","toastReducer","configureStore","middleware","getDefaultMiddleware","serializableCheck"],"sourceRoot":""}