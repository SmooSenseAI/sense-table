{"version":3,"file":"static/chunks/476.c301cf0d32e496ea.js","mappings":"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","sources":["webpack://_N_E/./src/components/elements/plotly/plotlyLayout.js","webpack://_N_E/./src/components/histogram/PlotlyHistogramPlot.js"],"sourcesContent":["import useMUITheme from \"@/hooks/useMUITheme\";\n\nexport const useCommonPlotlyLayout = ({xTitle='', yTitle=''}) => {\n\n    const muiTheme = useMUITheme();\n\n    return {\n        title: {\n            text: '',\n            font: {\n                color: muiTheme.palette.text.primary\n            }\n        },\n        xaxis: {\n            title: {\n                text: xTitle,\n                font: {\n                    color: muiTheme.palette.text.primary,\n                    size: muiTheme.typography.fontSize + 2\n                }\n            },\n            showticklabels: false, // Hide tick labels as in original\n            showline: false,\n            showgrid: false,\n            tickfont: {\n                color: muiTheme.palette.text.secondary\n            }\n        },\n        yaxis: {\n            title: {\n                text: yTitle,\n                font: {\n                    color: muiTheme.palette.text.primary\n                }\n            },\n            showticklabels: true,\n            showline: false,\n            showgrid: false,\n            tickfont: {\n                color: muiTheme.palette.text.secondary\n            }\n        },\n        paper_bgcolor: muiTheme.palette.background.paper,\n        plot_bgcolor: muiTheme.palette.background.card,\n        font: {\n            color: muiTheme.palette.text.primary\n        },\n        margin: {\n            l: 60,\n            r: 30,\n            t: 30,\n            b: 60\n        },\n        dragmode: 'pan',\n        legend: {\n            orientation: 'h',\n            x: 0,\n            y: 1.02,\n            font: {\n                color: muiTheme.palette.text.primary\n            }\n        },\n    }\n}","import React, { useMemo, useCallback, useEffect, useState } from 'react';\nimport dynamic from 'next/dynamic';\nimport useMUITheme from '@/hooks/useMUITheme';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchRandomRowData } from '@/store/rowDataSlice';\nimport { setSampleCondition } from '@/store/viewingSlice';\nimport { useCommonPlotlyLayout } from '@/components/elements/plotly/plotlyLayout';\n\n// Dynamically import our PlotlyWrapper to avoid SSR issues\nconst Plot = dynamic(() => import('@/components/elements/plotly/PlotlyWrapper'), { ssr: false });\n\nconst PlotlyHistogramPlot = React.memo(function PlotlyHistogramPlot({data}) {\n    const dispatch = useDispatch();\n    const muiTheme = useMUITheme();\n    const [isClient, setIsClient] = useState(false);\n    const [plotlyError, setPlotlyError] = useState(null);\n    const histogramBreakdownColumn = useSelector(state => state.settings.histogramBreakdownColumn);\n    const histogramColumn = useSelector(state => state.settings.histogramColumn);\n    const commonPlotlyLayout = useCommonPlotlyLayout({xTitle: histogramColumn, yTitle: 'Count'});\n\n    // Ensure we're on the client side\n    useEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    const plotData = useMemo(() => {\n        if (!data || !Array.isArray(data)) {\n            return [];\n        }\n\n        try {\n            // Convert each data series to Plotly format\n            const plotlyData = data.map((item, index) => ({\n                x: item.x || [],\n                y: item.y || [],\n                name: item.name ,\n                type: 'bar',\n                customdata: item.customdata || [],\n                hovertemplate:\n                    `<b>Count</b>: %{y}<br>` +\n                    `<b>${histogramBreakdownColumn}</b>: %{fullData.name}<br>` +\n                    `<b>${histogramColumn}</b>: %{x}<br>` +\n                    '<extra></extra>',\n                marker: {\n                    line: {\n                        color: muiTheme.palette.text.primary,\n                        width: 1\n                    }\n                }\n            }));\n\n            return plotlyData;\n        } catch (error) {\n            console.error('Error preparing histogram plot data:', error);\n            setPlotlyError(error.message);\n            return [];\n        }\n    }, [data, muiTheme, histogramBreakdownColumn, histogramColumn]);\n\n    const layout = useMemo(() => ({\n        ...commonPlotlyLayout,\n        barmode: 'stack', // Stacked bars like the original\n\n    }), [commonPlotlyLayout]);\n\n    const config = useMemo(() => ({\n        responsive: true,\n        displayModeBar: false,\n        scrollZoom: true,\n        displaylogo: false\n    }), []);\n\n    const handleClick = useCallback((plotlyData) => {\n        try {\n            if (plotlyData.points && plotlyData.points.length > 0) {\n                const point = plotlyData.points[0];\n                const condExpr = point.customdata?.condExpr;\n                if (condExpr) {\n                    dispatch(setSampleCondition(condExpr));\n                    dispatch(fetchRandomRowData({source: `Samples from histogram`}));\n                }\n            }\n        } catch (error) {\n            console.error('Error handling histogram click:', error);\n        }\n    }, [dispatch]);\n\n    // Don't render on server side\n    if (!isClient) {\n        return (\n            <div style={{\n                width: '100%',\n                height: '100%',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                backgroundColor: muiTheme.palette.background.paper,\n                color: muiTheme.palette.text.secondary\n            }}>\n                Loading chart...\n            </div>\n        );\n    }\n\n    // Show error state if there's an error\n    if (plotlyError) {\n        return (\n            <div style={{\n                width: '100%',\n                height: '300px',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                backgroundColor: muiTheme.palette.background.paper,\n                color: muiTheme.palette.error.main,\n                flexDirection: 'column',\n                gap: '10px'\n            }}>\n                <div>Error loading chart</div>\n                <div style={{ fontSize: '12px', opacity: 0.7 }}>{plotlyError}</div>\n            </div>\n        );\n    }\n\n    return (\n        <div style={{\n            width: '100%',\n            height: '100%',\n            minHeight: '300px'\n        }}>\n            <Plot\n                data={plotData}\n                layout={layout}\n                config={config}\n                style={{ width: '100%', height: '100%' }}\n                useResizeHandler={true}\n                onClick={handleClick}\n                onError={(error) => {\n                    console.error('Plotly histogram error:', error);\n                    setPlotlyError(error.message || 'Unknown plotting error');\n                }}\n            />\n        </div>\n    );\n});\n\nexport default PlotlyHistogramPlot;"],"names":["useCommonPlotlyLayout","_ref","_ref$xTitle","xTitle","_ref$yTitle","yTitle","muiTheme","useMUITheme","title","text","font","color","palette","primary","xaxis","size","typography","fontSize","showticklabels","showline","showgrid","tickfont","secondary","yaxis","paper_bgcolor","background","paper","plot_bgcolor","card","margin","l","r","t","b","dragmode","legend","orientation","x","y","Plot","dynamic","ssr","loadableGenerated","webpack","resolveWeak","PlotlyHistogramPlot","React","data","dispatch","useDispatch","_useState","useState","isClient","setIsClient","_useState2","plotlyError","setPlotlyError","histogramBreakdownColumn","useSelector","state","settings","histogramColumn","commonPlotlyLayout","useEffect","plotData","useMemo","Array","isArray","map","item","index","name","type","customdata","hovertemplate","concat","marker","line","width","error","console","message","layout","_objectSpread","barmode","config","responsive","displayModeBar","scrollZoom","displaylogo","handleClick","useCallback","plotlyData","points","length","_point$customdata","condExpr","setSampleCondition","fetchRandomRowData","source","_jsxs","style","height","display","alignItems","justifyContent","backgroundColor","main","flexDirection","gap","children","_jsx","opacity","minHeight","useResizeHandler","onClick","onError"],"sourceRoot":""}